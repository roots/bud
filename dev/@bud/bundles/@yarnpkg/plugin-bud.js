/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-bud",
factory: function (require) {
var plugin=(()=>{var A=Object.create,j=Object.defineProperty;var E=Object.getOwnPropertyDescriptor;var z=Object.getOwnPropertyNames;var F=Object.getPrototypeOf,T=Object.prototype.hasOwnProperty;var U=e=>j(e,"__esModule",{value:!0});var n=e=>{if(typeof require!="undefined")return require(e);throw new Error('Dynamic require of "'+e+'" is not supported')};var q=(e,t)=>{for(var s in t)j(e,s,{get:t[s],enumerable:!0})},D=(e,t,s)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of z(t))!T.call(e,o)&&o!=="default"&&j(e,o,{get:()=>t[o],enumerable:!(s=E(t,o))||s.enumerable});return e},r=e=>D(U(j(e!=null?A(F(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);var J={};q(J,{default:()=>H});var P=r(n("@yarnpkg/cli")),c=r(n("@yarnpkg/core")),I=r(n("@yarnpkg/shell")),a=class extends P.BaseCommand{async getManifest(){return await c.Manifest.tryFind(this.context.cwd)}async getConfiguration(){return await c.Configuration.find(this.context.cwd,this.context.plugins)}async getProject(){let t=await this.getConfiguration(),{project:s}=await c.Project.find(t,this.context.cwd);return s}async getWorkspace(){let t=await this.getConfiguration(),{workspace:s}=await c.Project.find(t,this.context.cwd);return s}async $(...t){let s=await this.getProject();await Promise.all(t.map(async o=>{if(!!o){process.stdout.write(`@bud | ${o}
`);try{let d=await(0,I.execute)(o,[],{cwd:s.cwd});if(d!==0)throw new Error(`@bud | ${o} failed with code ${d}
`);process.stdout.write(`@bud | ${o} completed with code ${d}
`)}catch(d){throw new Error(d)}}}))}};var B=class extends a{async execute(){this.context.stdout.write(B.usage.details)}},m=B;m.paths=[["@bud"]],m.usage={category:"@bud",description:"run developer commands",details:`Use this command to assist with developer tasks and debugging across the repository.

If you are just trying to build \`bud.js\` run \`yarn @bud make\`.

If you are doing development work in the repository you can run \`yarn @bud build -w\` to watch for changes and rebuild automatically.

There are additional commands to assist with:

\u{1F40B} using docker

- \`yarn @bud down --help\`
- \`yarn @bud up --help\`
- \`yarn @bud $ --help\`

\u{1F9FC} cleaning build artifacts

- \`yarn @bud clean --help\`

\u{1F9F1} compiling packages to single file, zero dependency executables

- \`yarn @bud compile --help\`

\u{1F4D9} documenting code

- \`yarn @bud docs --help\`

\u{1F928} linting code

- \`yarn @bud lint --help\`

\u{1F6E0}  building all packages as in CI

- \`yarn @bud make --help\`

\u{1F4E6}  proxying packages in a local dev environment

- \`yarn @bud proxy --help\`
`};var l=r(n("clipanion"));var u=class extends a{constructor(){super(...arguments);this.cjs=l.Option.Boolean("-c,--cjs",!1,{description:"build commonjs. default true."});this.esm=l.Option.Boolean("-e,--esm",!1,{description:"build esmodules. default true."});this.clean=l.Option.Boolean("--clean",!1,{description:"build with tsc --clean flag. default false"});this.force=l.Option.Boolean("--force",!1,{description:"build with tsc --force flag. default false."});this.verbose=l.Option.Boolean("--verbose",!0,{description:"build with tsc --verbose flag. default true."});this.watch=l.Option.Boolean("--watch",!1,{description:"build with tsc --watch flag. default false."})}async execute(){let t=!this.cjs&&!this.esm;this.clean&&(this.verbose=!1,this.force=!1);let s={cjs:`yarn tsc -b config/tsconfig.json${this.verbose?" --verbose":""}${this.clean?" --clean":""}${this.force?" --force":""}${this.watch?" --watch":""}`,esm:`yarn tsc -b config/tsconfig.esm.json${this.verbose?" --verbose":""}${this.clean?" --clean":""}${this.force?" --force":""}${this.watch?" --watch":""}`};t?await this.$(s.cjs,s.esm):this.cjs?await this.$(s.cjs):this.esm&&await this.$(s.esm),await this.$("yarn @bud compile @roots/container","yarn @bud compile @roots/bud-dashboard","yarn @bud compile @roots/bud-support")}};u.paths=[["@bud","build"]],u.usage={category:"@bud",description:"build project packages",examples:[["build packages as commonjs","yarn @bud build --cjs"],["build packages as esm","yarn @bud build --esm"],["build packages with tsc --clean flag","yarn @bud build --clean"],["build packages with tsc --force flag","yarn @bud build --force"],["build packages with tsc --verbose flag","yarn @bud build --verbose"],["build packages with tsc --watch flag","yarn @bud build --watch"],["force build commonjs verbosely","yarn @bud build --cjs --verbose --force"]]};var S=r(n("clipanion"));var b=class extends a{constructor(){super(...arguments);this.dfx=S.Option.Boolean("-d,--dfx",!1,{description:"use with caution. alias for git clean -dfx. removes all files not tracked in repo. default false."})}async execute(){if(await this.$("yarn cache clean"),this.dfx){await this.$("git clean -dfx");return}this.dfx||(await this.$("yarn rimraf **/.budfiles"),await this.$("yarn rimraf **/node_modules"),await this.$("yarn rimraf packages/@roots/*/lib"),await this.$("yarn rimraf packages/@roots/*/types"))}};b.paths=[["@bud","clean"]],b.usage={category:"@bud",description:"clean project artifacts",examples:[["delete all project artifacts","yarn @bud clean"],["delete all untracked files","yarn @bud clean --dfx"]]};var M=r(n("clipanion"));var f=class extends a{constructor(){super(...arguments);this.package=M.Option.String()}async execute(){await this.$(`yarn ts-node --project ./config/tsconfig.json ./dev/tasks/compile/cjs ${this.package}`),await this.$(`yarn ts-node --project ./config/tsconfig.json ./dev/tasks/compile/esm ${this.package}`)}};f.paths=[["@bud","compile"]],f.usage={category:"@bud",description:"compile a package",details:"compiles as both cjs and esm with ncc",examples:[["compile {package name}","yarn @bud compile @roots/bud-support"]]};var h=class extends a{async execute(){await this.$("docker compose down")}};h.paths=[["@bud","down"]],h.usage={category:"@bud",description:"stop the container",examples:[["stop the container","yarn @bud down"]]};var R=r(n("clipanion"));var g=class extends a{constructor(){super(...arguments);this.rest=R.Option.Rest()}async execute(){await this.$(`docker compose exec bud sh ${this.rest.reduce((t,s)=>`${t} ${s}`,"")}`)}};g.paths=[["@bud","$"]],g.usage={category:"@bud",description:"run a command in the container",examples:[["run bash command in docker container",'yarn @bud @ $ echo "hello world"']]};var y=class extends a{async execute(){await this.$("docker compose up -d")}};y.paths=[["@bud","up"]],y.usage={category:"@bud",description:"start the container",examples:[["start the container","yarn @ up"]]};var v=r(n("clipanion"));var w=class extends a{constructor(){super(...arguments);this.api=v.Option.Boolean("-a,--api",!1,{description:"build api docs"});this.site=v.Option.Boolean("-s,--site",!1,{description:"build site files"});this.readme=v.Option.Boolean("-r,--readme",!1,{description:"build readme files"})}async execute(){let t=!this.site&&!this.readme&&!this.api;(this.api||this.site||t)&&await this.$("yarn node ./site/api-documenter.build.js"),await this.$(...[this.site||t?"yarn workspace @roots/bud-docs run docusaurus build":null,this.readme||t?"yarn ts-node-transpile-only --project ./config/tsconfig.json ./dev/readme":null].filter(Boolean))}};w.paths=[["@bud","docs"]],w.usage={category:"@bud",description:"build docs and readme files. no flags builds everything. running with the --site flag will also build api docs.",examples:[["build all","yarn @bud docs"],["build api documentation","yarn @bud docs --api"],["build api documentation and site files","yarn @bud docs --site"],["build readme files","yarn docs --readme"]]};var p=r(n("clipanion"));var C=class extends a{constructor(){super(...arguments);this.prettier=p.Option.Boolean("-p,--prettier",!1,{description:"run prettier"});this.eslint=p.Option.Boolean("-e,--eslint",!1,{description:"run eslint"});this.skypack=p.Option.Boolean("-s,--skypack",!1,{description:"run skypack"});this.types=p.Option.Boolean("-t,--types",!1,{description:"includes types (prettier)"});this.lib=p.Option.Boolean("-l,--lib",!1,{description:"includes lib (prettier)"})}async execute(){!this.prettier&&!this.skypack&&!this.eslint&&(this.prettier=!0,this.skypack=!0,this.eslint=!0),await this.$(...[...this.eslint?["yarn eslint ./packages/@roots/*/src/**/*.{js,jsx,ts,tsx} --config ./config/.eslintrc.js --ignore-path ./config/.eslintignore --fix","yarn eslint ./dev/**/*.{js,jsx,ts,tsx} --config ./config/.eslintrc.js --ignore-path ./config/.eslintignore  --fix","yarn eslint ./site/src/**/*.{js,jsx,ts,tsx} --config ./config/.eslintrc.js --ignore-path ./config/.eslintignore  --fix"]:[],...this.prettier?["yarn prettier ./packages/@roots/*/src/**/* --config ./config/prettier.config.js --ignore-path ./config/.prettierignore --write --ignore-unknown --loglevel silent --no-error-on-unmatched-pattern",this.lib?"yarn prettier ./packages/@roots/*/lib/**/* --config ./config/prettier.config.js  --ignore-path ./config/.prettierignore --write --ignore-unknown --loglevel silent --no-error-on-unmatched-pattern":"",this.types?"yarn prettier ./packages/@roots/*/types/**/*.d.ts --config ./config/prettier.config.js --ignore-path ./config/.prettierignore --write --ignore-unknown --loglevel silent --no-error-on-unmatched-pattern":null].filter(Boolean):[],this.skypack?"yarn workspaces foreach --no-private --exclude @roots/bud-typings -p -v run pkg":null].filter(Boolean))}};C.paths=[["@bud","lint"]],C.usage={category:"@bud",description:"lint repo files. run all linters by passing no flags.",examples:[["run all linters","yarn @bud lint"],["run prettier","yarn @bud lint --prettier"],["run eslint","yarn @bud lint --eslint"],["run skypack","yarn @bud lint --skypack"],["lint on type definitions as well","yarn @bud lint --types"]]};var x=class extends a{async execute(){await this.$("yarn install --immutable"),await this.$("yarn @bud build"),await this.$("yarn @bud lint"),await this.$("yarn @bud test")}};x.paths=[["@bud","make"]],x.usage={category:"@bud",description:"make project files same as ci",examples:[["install/build repo packages","yarn @bud make"]]};var W=r(n("clipanion"));var k=class extends a{constructor(){super(...arguments);this.registry=W.Option.String("-r,--registry","http://verdaccio:4873",{description:"registry url. default http://verdaccio:4873"})}async auth(){await this.$(`npm-auth-to-token -u test -p test -e -test@test.com -r ${this.registry}`)}async setRegistry(){await this.$(`npm set registry ${this.registry}`)}async publish(){await this.$(`yarn workspaces foreach --no-private npm --registry ${this.registry} --access public publish`)}async execute(){await this.auth(),await this.setRegistry(),await this.publish()}};k.paths=[["@bud","verdaccio"]],k.usage={category:"@bud",description:"publish packages to verdaccio proxy",examples:[["publish packages to proxy","yarn @bud verdaccio"]]};var O=r(n("clipanion"));var $=class extends a{constructor(){super(...arguments);this.workers=O.Option.String("-w,--workers","50%",{description:"number of workers. default 50%."});this.update=O.Option.Boolean("--update",!1,{description:"update snapshots. default false."})}async execute(){await this.$(`yarn jest --config config/jest.config.js --verbose --maxWorkers=${this.workers} ${this.update?"--updateSnapshot":"--coverage"}`)}};$.paths=[["@bud","test"]],$.usage={category:"@bud",details:"test files with jest",examples:[["test","yarn @bud test"],["update snapshots","yarn @bud test --update"]]};var i={Bud:m,Build:u,Clean:b,Compile:f,DockerDown:h,DockerExec:g,DockerUp:y,Docs:w,Lint:C,Make:x,Test:$,Proxy:k};var G={hooks:{afterAllInstalled:()=>{process.stdout.write(`
What a great install, am I right?
`)}},commands:[i.Bud,i.Build,i.Clean,i.Compile,i.DockerExec,i.DockerDown,i.DockerUp,i.Lint,i.Make,i.Docs,i.Test,i.Proxy]},H=G;return J;})();
return plugin;
}
};
