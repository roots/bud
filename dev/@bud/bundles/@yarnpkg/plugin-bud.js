/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-bud",
factory: function (require) {
var plugin=(()=>{var M=Object.create,P=Object.defineProperty;var T=Object.getOwnPropertyDescriptor;var H=Object.getOwnPropertyNames;var V=Object.getPrototypeOf,D=Object.prototype.hasOwnProperty;var F=t=>P(t,"__esModule",{value:!0});var n=t=>{if(typeof require!="undefined")return require(t);throw new Error('Dynamic require of "'+t+'" is not supported')};var N=(t,a)=>{for(var e in a)P(t,e,{get:a[e],enumerable:!0})},U=(t,a,e)=>{if(a&&typeof a=="object"||typeof a=="function")for(let i of H(a))!D.call(t,i)&&i!=="default"&&P(t,i,{get:()=>a[i],enumerable:!(e=T(a,i))||e.enumerable});return t},r=t=>U(F(P(t!=null?M(V(t)):{},"default",t&&t.__esModule&&"default"in t?{get:()=>t.default,enumerable:!0}:{value:t,enumerable:!0})),t);var K={};N(K,{default:()=>J});var A=r(n("@yarnpkg/cli")),l=r(n("@yarnpkg/core")),R=r(n("@yarnpkg/shell")),s=class extends A.BaseCommand{async getManifest(){return await l.Manifest.tryFind(this.context.cwd)}async getConfiguration(){return await l.Configuration.find(this.context.cwd,this.context.plugins)}async getProject(){let a=await this.getConfiguration(),{project:e}=await l.Project.find(a,this.context.cwd);return e}async getWorkspace(){let a=await this.getConfiguration(),{workspace:e}=await l.Project.find(a,this.context.cwd);return e}withPassthrough(a){return this.passthrough.length?this.passthrough.reduce((e,i)=>i?`${e} ${i}`:`${e}`,a):a}async $(...a){let e=await this.getProject();await Promise.all(a.map(async i=>{if(!!i){console.log(`@bud | ${i}
`);try{let c=await(0,R.execute)(i,[],{cwd:e.cwd});if(c!==0)throw new Error(`@bud | ${i} failed with code ${c}
`)}catch(c){throw new Error(c)}}}))}};var O=class extends s{async execute(){this.context.stdout.write(O.usage.details)}},u=O;u.paths=[["@bud"]],u.usage={category:"@bud",description:"run developer commands",details:`Use this command to assist with developer tasks and debugging across the repository.

If you are just trying to build \`bud.js\` run \`yarn @bud make\`.

If you are doing development work in the repository you can run \`yarn @bud build -w\` to watch for changes and rebuild automatically.

There are additional commands to assist with:

\u{1F40B} using docker

- \`yarn @bud down --help\`
- \`yarn @bud up --help\`
- \`yarn @bud $ --help\`

\u{1F9FC} cleaning build artifacts

- \`yarn @bud clean --help\`

\u{1F9F1} compiling packages to single file, zero dependency executables

- \`yarn @bud compile --help\`

\u{1F4D9} documenting code

- \`yarn @bud docs --help\`

\u{1F928} linting code

- \`yarn @bud lint --help\`

\u{1F6E0}  building all packages as in CI

- \`yarn @bud make --help\`

\u{1F4E6}  proxying packages in a local dev environment

- \`yarn @bud proxy --help\`
`};var p=r(n("clipanion"));var m=class extends s{constructor(){super(...arguments);this.cjs=p.Option.Boolean("-c,--cjs",!1,{description:"build commonjs. default true."});this.esm=p.Option.Boolean("-e,--esm",!1,{description:"build esmodules. default true."});this.clean=p.Option.Boolean("--clean",!1,{description:"build with tsc --clean flag. default false"});this.force=p.Option.Boolean("--force",!1,{description:"build with tsc --force flag. default false."});this.verbose=p.Option.Boolean("--verbose",!0,{description:"build with tsc --verbose flag. default true."});this.watch=p.Option.Boolean("--watch",!1,{description:"build with tsc --watch flag. default false."})}async execute(){let a=!this.cjs&&!this.esm;this.clean&&(this.verbose=!1,this.force=!1);let e={cjs:`yarn tsc -b config/tsconfig.json${this.verbose?" --verbose":""}${this.clean?" --clean":""}${this.force?" --force":""}${this.watch?" --watch":""}`,esm:`yarn tsc -b config/tsconfig.esm.json${this.verbose?" --verbose":""}${this.clean?" --clean":""}${this.force?" --force":""}${this.watch?" --watch":""}`};a?await this.$(e.cjs,e.esm):this.cjs?await this.$(e.cjs):this.esm&&await this.$(e.esm),await this.$("yarn @bud compile @roots/container","yarn @bud compile @roots/bud-dashboard","yarn @bud compile @roots/bud-support","yarn @bud compile @roots/wordpress-dependencies-webpack-plugin","yarn @bud compile @roots/wordpress-externals-webpack-plugin","yarn @bud compile @roots/entrypoints-webpack-plugin")}};m.paths=[["@bud","build"]],m.usage={category:"@bud",description:"build project packages",examples:[["build packages as commonjs","yarn @bud build --cjs"],["build packages as esm","yarn @bud build --esm"],["build packages with tsc --clean flag","yarn @bud build --clean"],["build packages with tsc --force flag","yarn @bud build --force"],["build packages with tsc --verbose flag","yarn @bud build --verbose"],["build packages with tsc --watch flag","yarn @bud build --watch"],["force build commonjs verbosely","yarn @bud build --cjs --verbose --force"]]};var h=class extends s{async execute(){await this.$("yarn cache clean"),await this.$("git clean -fxd")}};h.paths=[["@bud","clean"]],h.usage={category:"@bud",description:"clean project artifacts",examples:[["delete all untracked files","yarn @bud clean --dfx"]]};var q=r(n("clipanion"));var b=class extends s{constructor(){super(...arguments);this.package=q.Option.String()}async execute(){await this.$(`yarn ts-node --project ./config/tsconfig.json ./dev/tasks/compile/cjs ${this.package}`),await this.$(`yarn ts-node --project ./config/tsconfig.json ./dev/tasks/compile/esm ${this.package}`)}};b.paths=[["@bud","compile"]],b.usage={category:"@bud",description:"compile a package",details:"compiles as both cjs and esm with ncc",examples:[["compile {package name}","yarn @bud compile @roots/bud-support"]]};var I=r(n("clipanion"));var g=class extends s{constructor(){super(...arguments);this.passthrough=I.Option.Proxy({name:"@bud options"})}async execute(){await this.$(this.withPassthrough("docker compose run bud yarn @bud"))}};g.paths=[["@bud",":"]],g.usage={category:"@bud",description:"run a @bud command inside the container.",details:"equivalent to `docker compose run bud yarn @bud [...]`",examples:[["run `yarn @bud make` within the container","yarn @bud : make"]]};var z=r(n("clipanion"));var y=class extends s{constructor(){super(...arguments);this.passthrough=z.Option.Proxy({name:"docker compose down options"})}async execute(){await this.$(this.withPassthrough("docker compose down"))}};y.paths=[["@bud","down"]],y.usage={category:"@bud",description:"stop the container",details:"equivalent to `docker compose down [...]`",examples:[["stop the container","yarn @bud down"]]};var f=class extends s{async execute(){await this.$(this.withPassthrough("docker compose run bud"))}};f.paths=[["@bud","$"]],f.usage={category:"@bud",description:"run a command in the container",details:"equivalent to `docker compose run bud [...]`",examples:[["run bash command in docker container",'yarn @bud $ echo "hello world"']]};var w=class extends s{async execute(){await this.$("docker compose run bud bash")}};w.paths=[["@bud","bash"]],w.usage={category:"@bud",description:"open a bash shell",details:"equivalent to `docker compose run bud bash`",examples:[["open a bash shell","yarn @bud bash"]]};var E=r(n("clipanion"));var C=class extends s{constructor(){super(...arguments);this.passthrough=E.Option.Proxy({name:"docker compose up options"})}async execute(){await this.$(this.withPassthrough("docker compose up"))}};C.paths=[["@bud","up"]],C.usage={category:"@bud",description:"start the container",details:"equivalent to `docker compose up [...]`",examples:[["start the container","yarn @bud up"],["start the container detached","yarn @bud up -d"]]};var S=r(n("clipanion"));var k=class extends s{constructor(){super(...arguments);this.api=S.Option.Boolean("-a,--api",!1,{description:"build api docs"});this.site=S.Option.Boolean("-s,--site",!1,{description:"build site files"});this.readme=S.Option.Boolean("-r,--readme",!1,{description:"build readme files"})}async execute(){if(!this.site&&!this.readme&&!this.api){await this.$("yarn node ./site/api-documenter.build.js","yarn ts-node ./dev/site/cli-examples"),await this.$("yarn workspace @roots/bud-docs run docusaurus build","yarn ts-node-transpile-only --project ./config/tsconfig.json ./dev/readme");return}(this.api||this.site)&&await this.$("yarn node ./site/api-documenter.build.js"),this.site&&(await this.$("yarn ts-node ./dev/site/cli-examples"),await this.$("yarn workspace @roots/bud-docs run docusaurus build")),this.readme&&await this.$("yarn ts-node-transpile-only --project ./config/tsconfig.json ./dev/readme")}};k.paths=[["@bud","docs"]],k.usage={category:"@bud",description:"build docs and readme files. no flags builds everything. running with the --site flag will also build api docs.",examples:[["build all","yarn @bud docs"],["build api documentation","yarn @bud docs --api"],["build api documentation and site files","yarn @bud docs --site"],["build readme files","yarn docs --readme"]]};var d=r(n("clipanion"));var x=class extends s{constructor(){super(...arguments);this.prettier=d.Option.Boolean("-p,--prettier",!1,{description:"run prettier"});this.eslint=d.Option.Boolean("-e,--eslint",!1,{description:"run eslint"});this.skypack=d.Option.Boolean("-s,--skypack",!1,{description:"run skypack"});this.types=d.Option.Boolean("-t,--types",!1,{description:"includes types (prettier)"});this.lib=d.Option.Boolean("-l,--lib",!1,{description:"includes lib (prettier)"})}async execute(){!this.prettier&&!this.skypack&&!this.eslint&&(this.prettier=!0,this.skypack=!0,this.eslint=!0),await this.$(...[...this.eslint?["yarn eslint ./packages/@roots/*/src/**/*.{js,jsx,ts,tsx} --fix","yarn eslint ./dev/**/*.{js,jsx,ts,tsx} --fix","yarn eslint ./site/src/**/*.{js,jsx,ts,tsx} --fix"]:[],...this.prettier?["yarn prettier ./packages/@roots/*/src/**/* --write --ignore-unknown --loglevel silent --no-error-on-unmatched-pattern",this.lib?"yarn prettier ./packages/@roots/*/lib/**/* --write --ignore-unknown --loglevel silent --no-error-on-unmatched-pattern":"",this.types?"yarn prettier ./packages/@roots/*/types/**/*.d.ts --write --ignore-unknown --loglevel silent --no-error-on-unmatched-pattern":null].filter(Boolean):[],this.skypack?"yarn workspaces foreach --no-private --exclude @roots/bud-typings -p -v run pkg":null].filter(Boolean))}};x.paths=[["@bud","lint"]],x.usage={category:"@bud",description:"lint repo files. run all linters by passing no flags.",examples:[["run all linters","yarn @bud lint"],["run prettier","yarn @bud lint --prettier"],["run eslint","yarn @bud lint --eslint"],["run skypack","yarn @bud lint --skypack"],["lint on type definitions as well","yarn @bud lint --types"]]};var $=class extends s{async execute(){await this.$("yarn install --immutable"),await this.$("yarn @bud build"),await this.$("yarn @bud lint","yarn @bud test --coverage"),await this.$("yarn @bud docs")}};$.paths=[["@bud","make"]],$.usage={category:"@bud",description:"make project files same as ci",examples:[["install/build repo packages","yarn @bud make"]]};var v=r(n("clipanion"));var j=class extends s{constructor(){super(...arguments);this.npmRegistryServer=v.Option.String("--registry,-r","//verdaccio:4873",{description:"registry"});this.token=v.Option.String("-t,--token",null,{description:"token"});this.version=v.Option.String("-v,--version",null,{description:"version"});this.tag=v.Option.String("-t,--tag","dev",{description:"tag"});this.currentVersion=null;this.configStash={npmPublishAccess:null,npmRegistryServer:null,unsafeHttpWhitelist:null,npmAuthIdent:null,npmAuthToken:null}}async execute(){try{await this.preflight(),await this.bump(),await this.make(),await this.publish(),this.tag==="latest"&&await this.push(),this.tag==="next"&&await this.restoreBranch(),await this.restoreConfig()}catch(a){throw await this.restoreConfig(),a}}async preflight(){let a=this.npmRegistryServer==="//verdaccio:4873";if(!this.version)throw new Error("--version is required");if(!a&&!this.token)throw new Error("--token is required for an npm release");let e=async()=>{await this.$(`yarn config set unsafeHttpWhitelist --json '["verdaccio"]'`),await this.$("yarn config set npmAuthIdent test:test"),await this.$(`yarn npm-auth-to-token -u test -p test -e -test@test.com -r ${this.npmRegistryServer}`)},i=async()=>{await this.$(`yarn config set npmAuthToken ${this.token}`)};await Promise.all(Object.keys(this.configStash).map(async c=>{this.configStash[c]=await this.$(`yarn config get ${c}`)})),await this.$("yarn config set npmPublishAccess public"),await this.$(`yarn config set npmRegistryServer ${this.npmRegistryServer}`),this.npmRegistryServer==="//verdaccio:4873"?await e():await i()}async bump(){await this.$("yarn @bud clean"),await this.$(`git checkout -b v${this.version}`),await this.$("yarn install --immutable"),await this.$(`yarn workspaces foreach --no-private exec npm version ${this.version}`)}async make(){await this.$("yarn @bud clean"),await this.$("yarn @bud make")}async publish(){await this.$(`git commit -am 'chore: Bump @roots/bud to v${this.version}`),await this.$(`git tag v${this.version}`),await this.$(`yarn workspaces foreach --no-private npm publish --access public --tag ${this.tag}`),await this.$("git push --tags")}async push(){await this.$(`git push -u origin v${this.version}`)}async restoreBranch(){await this.$("git checkout next"),await this.$(`git branch -D v${this.version}`)}async restoreConfig(){await this.$(...Object.entries(this.configStash).reduce((a,[e,i])=>[...a,`yarn config set ${e} ${i}`],[]))}};j.paths=[["@bud","release"]],j.usage={category:"@bud",description:"run release",examples:[["yarn @bud release --version x.y.z --tag latest --token <token> --registry https://registry.npmjs.org","Bump packages to x.y.z and publish to npm."],["yarn @bud release --version x.y.z --tag latest","Bump packages to x.y.z and publish to local verdaccio server"]]};var W=r(n("clipanion"));var B=class extends s{constructor(){super(...arguments);this.passthrough=W.Option.Proxy({name:"jest options"})}async execute(){await this.$(this.withPassthrough("yarn jest --config config/jest.config.js"))}};B.paths=[["@bud","test"]],B.usage={category:"@bud",details:"test files with jest",examples:[["test","yarn @bud test"],["update snapshots","yarn @bud test --updateSnapshot"]]};var o={Bud:u,Build:m,Clean:h,Compile:b,ContainerBud:g,ContainerDown:y,ContainerRun:f,ContainerBash:w,ContainerUp:C,Docs:k,Lint:x,Make:$,Test:B,Release:j};var G={hooks:{afterAllInstalled:()=>{process.stdout.write(`
What a great install, am I right?
`)}},commands:[o.Bud,o.Build,o.Clean,o.Compile,o.ContainerBud,o.ContainerDown,o.ContainerRun,o.ContainerBash,o.ContainerUp,o.Lint,o.Make,o.Docs,o.Test,o.Release]},J=G;return K;})();
return plugin;
}
};
