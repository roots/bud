/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-bud",
factory: function (require) {
var plugin=(()=>{var z=Object.create,B=Object.defineProperty;var F=Object.getOwnPropertyDescriptor;var T=Object.getOwnPropertyNames;var U=Object.getPrototypeOf,D=Object.prototype.hasOwnProperty;var G=a=>B(a,"__esModule",{value:!0});var n=a=>{if(typeof require!="undefined")return require(a);throw new Error('Dynamic require of "'+a+'" is not supported')};var H=(a,e)=>{for(var s in e)B(a,s,{get:e[s],enumerable:!0})},J=(a,e,s)=>{if(e&&typeof e=="object"||typeof e=="function")for(let o of T(e))!D.call(a,o)&&o!=="default"&&B(a,o,{get:()=>e[o],enumerable:!(s=F(e,o))||s.enumerable});return a},r=a=>J(G(B(a!=null?z(U(a)):{},"default",a&&a.__esModule&&"default"in a?{get:()=>a.default,enumerable:!0}:{value:a,enumerable:!0})),a);var N={};H(N,{default:()=>L});var S=r(n("@yarnpkg/cli")),c=r(n("@yarnpkg/core")),A=r(n("@yarnpkg/shell")),t=class extends S.BaseCommand{async getManifest(){return await c.Manifest.tryFind(this.context.cwd)}async getConfiguration(){return await c.Configuration.find(this.context.cwd,this.context.plugins)}async getProject(){let e=await this.getConfiguration(),{project:s}=await c.Project.find(e,this.context.cwd);return s}async getWorkspace(){let e=await this.getConfiguration(),{workspace:s}=await c.Project.find(e,this.context.cwd);return s}withPassthrough(e){return this.passthrough.length?this.passthrough.reduce((s,o)=>o?`${s} ${o}`:`${s}`,e):e}async $(...e){let s=await this.getProject();await Promise.all(e.map(async o=>{if(!!o){console.log(`@bud | ${o}
`);try{let v=await(0,A.execute)(o,[],{cwd:s.cwd});if(v!==0)throw new Error(`@bud | ${o} failed with code ${v}
`)}catch(v){throw new Error(v)}}}))}};var O=class extends t{async execute(){this.context.stdout.write(O.usage.details)}},d=O;d.paths=[["@bud"]],d.usage={category:"@bud",description:"run developer commands",details:`Use this command to assist with developer tasks and debugging across the repository.

If you are just trying to build \`bud.js\` run \`yarn @bud make\`.

If you are doing development work in the repository you can run \`yarn @bud build -w\` to watch for changes and rebuild automatically.

There are additional commands to assist with:

\u{1F40B} using docker

- \`yarn @bud down --help\`
- \`yarn @bud up --help\`
- \`yarn @bud $ --help\`

\u{1F9FC} cleaning build artifacts

- \`yarn @bud clean --help\`

\u{1F9F1} compiling packages to single file, zero dependency executables

- \`yarn @bud compile --help\`

\u{1F4D9} documenting code

- \`yarn @bud docs --help\`

\u{1F928} linting code

- \`yarn @bud lint --help\`

\u{1F6E0}  building all packages as in CI

- \`yarn @bud make --help\`

\u{1F4E6}  proxying packages in a local dev environment

- \`yarn @bud proxy --help\`
`};var l=r(n("clipanion"));var u=class extends t{constructor(){super(...arguments);this.cjs=l.Option.Boolean("-c,--cjs",!1,{description:"build commonjs. default true."});this.esm=l.Option.Boolean("-e,--esm",!1,{description:"build esmodules. default true."});this.clean=l.Option.Boolean("--clean",!1,{description:"build with tsc --clean flag. default false"});this.force=l.Option.Boolean("--force",!1,{description:"build with tsc --force flag. default false."});this.verbose=l.Option.Boolean("--verbose",!0,{description:"build with tsc --verbose flag. default true."});this.watch=l.Option.Boolean("--watch",!1,{description:"build with tsc --watch flag. default false."})}async execute(){let e=!this.cjs&&!this.esm;this.clean&&(this.verbose=!1,this.force=!1);let s={cjs:`yarn tsc -b config/tsconfig.json${this.verbose?" --verbose":""}${this.clean?" --clean":""}${this.force?" --force":""}${this.watch?" --watch":""}`,esm:`yarn tsc -b config/tsconfig.esm.json${this.verbose?" --verbose":""}${this.clean?" --clean":""}${this.force?" --force":""}${this.watch?" --watch":""}`};e?await this.$(s.cjs,s.esm):this.cjs?await this.$(s.cjs):this.esm&&await this.$(s.esm),await this.$("yarn @bud compile @roots/container","yarn @bud compile @roots/bud-dashboard","yarn @bud compile @roots/bud-support")}};u.paths=[["@bud","build"]],u.usage={category:"@bud",description:"build project packages",examples:[["build packages as commonjs","yarn @bud build --cjs"],["build packages as esm","yarn @bud build --esm"],["build packages with tsc --clean flag","yarn @bud build --clean"],["build packages with tsc --force flag","yarn @bud build --force"],["build packages with tsc --verbose flag","yarn @bud build --verbose"],["build packages with tsc --watch flag","yarn @bud build --watch"],["force build commonjs verbosely","yarn @bud build --cjs --verbose --force"]]};var M=r(n("clipanion"));var m=class extends t{constructor(){super(...arguments);this.dfx=M.Option.Boolean("-d,--dfx",!1,{description:"use with caution. alias for git clean -dfx. removes all files not tracked in repo. default false."})}async execute(){if(await this.$("yarn cache clean"),this.dfx){await this.$("git clean -dfx");return}this.dfx||(await this.$("yarn rimraf **/.budfiles"),await this.$("yarn rimraf **/node_modules"),await this.$("yarn rimraf packages/@roots/*/lib"),await this.$("yarn rimraf packages/@roots/*/types"))}};m.paths=[["@bud","clean"]],m.usage={category:"@bud",description:"clean project artifacts",examples:[["delete all project artifacts","yarn @bud clean"],["delete all untracked files","yarn @bud clean --dfx"]]};var W=r(n("clipanion"));var b=class extends t{constructor(){super(...arguments);this.package=W.Option.String()}async execute(){await this.$(`yarn ts-node --project ./config/tsconfig.json ./dev/tasks/compile/cjs ${this.package}`),await this.$(`yarn ts-node --project ./config/tsconfig.json ./dev/tasks/compile/esm ${this.package}`)}};b.paths=[["@bud","compile"]],b.usage={category:"@bud",description:"compile a package",details:"compiles as both cjs and esm with ncc",examples:[["compile {package name}","yarn @bud compile @roots/bud-support"]]};var E=r(n("clipanion"));var h=class extends t{constructor(){super(...arguments);this.passthrough=E.Option.Proxy({name:"@bud options"})}async execute(){await this.$(this.withPassthrough("docker compose run bud yarn @bud"))}};h.paths=[["@bud",":"]],h.usage={category:"@bud",description:"run a @bud command inside the container.",details:"equivalent to `docker compose run bud yarn @bud [...]`",examples:[["run `yarn @bud make` within the container","yarn @bud : make"]]};var R=r(n("clipanion"));var f=class extends t{constructor(){super(...arguments);this.passthrough=R.Option.Proxy({name:"docker compose down options"})}async execute(){await this.$(this.withPassthrough("docker compose down"))}};f.paths=[["@bud","down"]],f.usage={category:"@bud",description:"stop the container",details:"equivalent to `docker compose down [...]`",examples:[["stop the container","yarn @bud down"]]};var g=class extends t{async execute(){await this.$(this.withPassthrough("docker compose run bud"))}};g.paths=[["@bud","$"]],g.usage={category:"@bud",description:"run a command in the container",details:"equivalent to `docker compose run bud [...]`",examples:[["run bash command in docker container",'yarn @bud $ echo "hello world"']]};var y=class extends t{async execute(){await this.$("docker compose run bud bash")}};y.paths=[["@bud","bash"]],y.usage={category:"@bud",description:"open a bash shell",details:"equivalent to `docker compose run bud bash`",examples:[["open a bash shell","yarn @bud bash"]]};var V=r(n("clipanion"));var w=class extends t{constructor(){super(...arguments);this.passthrough=V.Option.Proxy({name:"docker compose up options"})}async execute(){await this.$(this.withPassthrough("docker compose up"))}};w.paths=[["@bud","up"]],w.usage={category:"@bud",description:"start the container",details:"equivalent to `docker compose up [...]`",examples:[["start the container","yarn @bud up"],["start the container detached","yarn @bud up -d"]]};var P=r(n("clipanion"));var C=class extends t{constructor(){super(...arguments);this.api=P.Option.Boolean("-a,--api",!1,{description:"build api docs"});this.site=P.Option.Boolean("-s,--site",!1,{description:"build site files"});this.readme=P.Option.Boolean("-r,--readme",!1,{description:"build readme files"})}async execute(){let e=!this.site&&!this.readme&&!this.api;(this.api||this.site||e)&&await this.$("yarn node ./site/api-documenter.build.js"),await this.$(...[this.site||e?"yarn workspace @roots/bud-docs run docusaurus build":null,this.readme||e?"yarn ts-node-transpile-only --project ./config/tsconfig.json ./dev/readme":null].filter(Boolean))}};C.paths=[["@bud","docs"]],C.usage={category:"@bud",description:"build docs and readme files. no flags builds everything. running with the --site flag will also build api docs.",examples:[["build all","yarn @bud docs"],["build api documentation","yarn @bud docs --api"],["build api documentation and site files","yarn @bud docs --site"],["build readme files","yarn docs --readme"]]};var p=r(n("clipanion"));var x=class extends t{constructor(){super(...arguments);this.prettier=p.Option.Boolean("-p,--prettier",!1,{description:"run prettier"});this.eslint=p.Option.Boolean("-e,--eslint",!1,{description:"run eslint"});this.skypack=p.Option.Boolean("-s,--skypack",!1,{description:"run skypack"});this.types=p.Option.Boolean("-t,--types",!1,{description:"includes types (prettier)"});this.lib=p.Option.Boolean("-l,--lib",!1,{description:"includes lib (prettier)"})}async execute(){!this.prettier&&!this.skypack&&!this.eslint&&(this.prettier=!0,this.skypack=!0,this.eslint=!0),await this.$(...[...this.eslint?["yarn eslint ./packages/@roots/*/src/**/*.{js,jsx,ts,tsx} --config ./config/.eslintrc.js --ignore-path ./config/.eslintignore --fix","yarn eslint ./dev/**/*.{js,jsx,ts,tsx} --config ./config/.eslintrc.js --ignore-path ./config/.eslintignore  --fix","yarn eslint ./site/src/**/*.{js,jsx,ts,tsx} --config ./config/.eslintrc.js --ignore-path ./config/.eslintignore  --fix"]:[],...this.prettier?["yarn prettier ./packages/@roots/*/src/**/* --config ./config/prettier.config.js --ignore-path ./config/.prettierignore --write --ignore-unknown --loglevel silent --no-error-on-unmatched-pattern",this.lib?"yarn prettier ./packages/@roots/*/lib/**/* --config ./config/prettier.config.js  --ignore-path ./config/.prettierignore --write --ignore-unknown --loglevel silent --no-error-on-unmatched-pattern":"",this.types?"yarn prettier ./packages/@roots/*/types/**/*.d.ts --config ./config/prettier.config.js --ignore-path ./config/.prettierignore --write --ignore-unknown --loglevel silent --no-error-on-unmatched-pattern":null].filter(Boolean):[],this.skypack?"yarn workspaces foreach --no-private --exclude @roots/bud-typings -p -v run pkg":null].filter(Boolean))}};x.paths=[["@bud","lint"]],x.usage={category:"@bud",description:"lint repo files. run all linters by passing no flags.",examples:[["run all linters","yarn @bud lint"],["run prettier","yarn @bud lint --prettier"],["run eslint","yarn @bud lint --eslint"],["run skypack","yarn @bud lint --skypack"],["lint on type definitions as well","yarn @bud lint --types"]]};var k=class extends t{async execute(){await this.$("yarn install --immutable"),await this.$("yarn @bud build"),await this.$("yarn @bud lint"),await this.$("yarn @bud test")}};k.paths=[["@bud","make"]],k.usage={category:"@bud",description:"make project files same as ci",examples:[["install/build repo packages","yarn @bud make"]]};var q=r(n("clipanion"));var $=class extends t{constructor(){super(...arguments);this.registry=q.Option.String("-r,--registry","http://verdaccio:4873",{description:"registry url. default http://verdaccio:4873"});this.version=q.Option.String("-v,--version",null,{description:"version"})}async auth(){await this.$(`yarn npm-auth-to-token -u test -p test -e -test@test.com -r ${this.registry}`)}async setRegistry(){await this.$(`npm set registry ${this.registry}`)}async npmVersion(){this.version&&await this.$(`yarn workspaces foreach --no-private exec npm version ${this.version}`)}async publish(){await this.$("yarn workspaces foreach --no-private npm publish --access public")}async execute(){await this.auth(),await this.setRegistry(),await this.npmVersion(),await this.publish()}};$.paths=[["@bud","proxy"]],$.usage={category:"@bud",description:"publish packages to proxy repo",examples:[["publish packages to proxy","yarn @bud proxy"]]};var I=r(n("clipanion"));var j=class extends t{constructor(){super(...arguments);this.workers=I.Option.String("-w,--workers","50%",{description:"number of workers. default 50%."});this.update=I.Option.Boolean("--update",!1,{description:"update snapshots. default false."})}async execute(){await this.$(`yarn jest --config config/jest.config.js --verbose --maxWorkers=${this.workers} ${this.update?"--updateSnapshot":"--coverage"}`)}};j.paths=[["@bud","test"]],j.usage={category:"@bud",details:"test files with jest",examples:[["test","yarn @bud test"],["update snapshots","yarn @bud test --update"]]};var i={Bud:d,Build:u,Clean:m,Compile:b,ContainerBud:h,ContainerDown:f,ContainerRun:g,ContainerBash:y,ContainerUp:w,Docs:C,Lint:x,Make:k,Test:j,Proxy:$};var K={hooks:{afterAllInstalled:()=>{process.stdout.write(`
What a great install, am I right?
`)}},commands:[i.Bud,i.Build,i.Clean,i.Compile,i.ContainerBud,i.ContainerDown,i.ContainerRun,i.ContainerBash,i.ContainerUp,i.Lint,i.Make,i.Docs,i.Test,i.Proxy]},L=K;return N;})();
return plugin;
}
};
