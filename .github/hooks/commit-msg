#!/usr/bin/env node

/**
 * This script is used as a commit-msg Git hook to validate and format commit messages.
 * It checks if the commit message follows a specific format and adds an emoji and additional information to the message.
 * The commit message format should be: <type>:<severity> <description>
 * Where <type> is one of: chore, feat, fix, test, deps
 * And <severity> is one of: none, patch, minor, major
 * Example: feat:minor add new feature
 *
 * @remarks
 * The script exports an empty object to satisfy the requirements of the ES module system.
 */

import fs from 'node:fs/promises'

import chalk from '@roots/bud-support/chalk'

class emoji {
  static chore = `ðŸ§¹`
  static deps = `ðŸ“¦`
  static feat = `âœ¨`
  static fix = `ðŸ©¹`
  static test = `ðŸ§ª`

  static get(type) {
    return emoji[type]
  }
}

class code {
  static invalid = 1
  static write = 2
  static read = 3

  static get(key) {
    return code[key]
  }
}

const validator =
  /^(chore|feat|fix|test|deps):(none|patch|minor|major)(.*)/



const withCode =
  code =>
  (...messages) => {
    messages.map(message =>
      process.stderr.write(`${message.message ?? message}\n`),
    )
    process.exit(code)
  }

const [, , file] = process.argv

const original = await fs
  .readFile(file, `utf8`)
  .catch(withCode(code.get(`read`)))
  .then(message =>
    message
      .split(`\n`)
      .filter(ln => !ln.startsWith(`#`))
      .map(ln => ln.trim())
      .join(`\n`)
  )

/**
 * Allow for totally empty commit messages
 */
if (original === `\n`) {
  process.exit(0)
}

if (!validator.test(original)) {
  withCode(code.get(`invalid`))(
    chalk.red(`Invalid commit message format\n`),
    `Message should follow the format: <type>:<severity> <description>\n`,
    `Where <type> is one of: chore, feat, fix, test, deps\n`,
    `And <severity> is one of: none, patch, minor, major\n`,
    `Example: feat:minor add new feature`,
  )
}

await fs
  .writeFile(
    file,
    original.replace(
      validator,
      (_, type, severity, description) =>
        `${emoji.get(type)} ${type}(${severity}):${description}`,
    ),
    `utf8`,
  )
  .catch(withCode(code.get(`write`)))

  // module exports required for esm
  export default {}

