/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-repo",
factory: function (require) {
var plugin=(()=>{var v=Object.create,y=Object.defineProperty;var B=Object.getOwnPropertyDescriptor;var P=Object.getOwnPropertyNames;var O=Object.getPrototypeOf,S=Object.prototype.hasOwnProperty;var W=e=>y(e,"__esModule",{value:!0});var o=e=>{if(typeof require!="undefined")return require(e);throw new Error('Dynamic require of "'+e+'" is not supported')};var A=(e,t)=>{for(var i in t)y(e,i,{get:t[i],enumerable:!0})},E=(e,t,i)=>{if(t&&typeof t=="object"||typeof t=="function")for(let a of P(t))!S.call(e,a)&&a!=="default"&&y(e,a,{get:()=>t[a],enumerable:!(i=B(t,a))||i.enumerable});return e},r=e=>E(W(y(e!=null?v(O(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);var M={};A(M,{default:()=>F});var c=r(o("clipanion"));var x=r(o("@yarnpkg/cli")),n=r(o("@yarnpkg/core")),C=r(o("@yarnpkg/shell")),s=class extends x.BaseCommand{async getManifest(){return await n.Manifest.tryFind(this.context.cwd)}async getConfiguration(){return await n.Configuration.find(this.context.cwd,this.context.plugins)}async getProject(){let t=await this.getConfiguration(),{project:i}=await n.Project.find(t,this.context.cwd);return i}async getWorkspace(){let t=await this.getConfiguration(),{workspace:i}=await n.Project.find(t,this.context.cwd);return i}async $(...t){let i=await this.getProject();await Promise.all(t.map(async a=>{if(!!a){process.stdout.write(`[repo] ${a}
`);try{let p=await(0,C.execute)(a,[],{cwd:i.cwd});if(p!==0)throw new Error(`[repo] ${a} failed with code ${p}
`);process.stdout.write(`[repo] ${a} completed with code ${p}
`)}catch(p){throw new Error(p)}}}))}};var d=class extends s{constructor(){super(...arguments);this.cjs=c.Option.Boolean("-c,--cjs",!1,{description:"build commonjs. default true."});this.esm=c.Option.Boolean("-e,--esm",!1,{description:"build esmodules. default true."});this.clean=c.Option.Boolean("--clean",!1,{description:"build with tsc --clean flag. default false"});this.force=c.Option.Boolean("--force",!1,{description:"build with tsc --force flag. default false."});this.verbose=c.Option.Boolean("--verbose",!0,{description:"build with tsc --verbose flag. default true."});this.watch=c.Option.Boolean("--watch",!1,{description:"build with tsc --watch flag. default false."})}async execute(){let t=!this.cjs&&!this.esm;this.clean&&(this.verbose=!1,this.force=!1);let i={cjs:`yarn tsc -b config/tsconfig.json${this.verbose?" --verbose":""}${this.clean?" --clean":""}${this.force?" --force":""}${this.watch?" --watch":""}`,esm:`yarn tsc -b config/tsconfig.esm.json${this.verbose?" --verbose":""}${this.clean?" --clean":""}${this.force?" --force":""}${this.watch?" --watch":""}`};t?await this.$(i.cjs,i.esm):this.cjs?await this.$(i.cjs):this.esm&&await this.$(i.esm),await this.$("yarn repo compile @roots/container","yarn repo compile @roots/bud-dashboard","yarn repo compile @roots/bud-support")}};d.paths=[["repo","build"]],d.usage={category:"repo",details:"build project packages.",examples:[["build packages as commonjs","yarn repo build --cjs"],["build packages as esm","yarn repo build --esm"],["build packages with tsc --clean flag","yarn repo build --clean"],["build packages with tsc --force flag","yarn repo build --force"],["build packages with tsc --verbose flag","yarn repo build --verbose"],["build packages with tsc --watch flag","yarn repo build --watch"],["force build commonjs verbosely","yarn repo build --cjs --verbose --force"]]};var j=r(o("clipanion"));var u=class extends s{constructor(){super(...arguments);this.options={dfx:j.Option.Boolean("-d,--dfx",!1,{description:"use with caution. alias for git clean -dfx. removes all files not tracked in repo. default false."})}}async execute(){if(await this.$("yarn cache clean"),this.options.dfx){await this.$("git clean -dfx");return}this.options.dfx||(await this.$("yarn rimraf **/.budfiles"),await this.$("yarn rimraf **/node_modules"),await this.$("yarn rimraf packages/@roots/*/lib"),await this.$("yarn rimraf packages/@roots/*/types"))}};u.paths=[["repo","clean"]],u.usage={category:"repo",details:"clean project artifacts files",examples:[["delete all project artifacts","yarn repo clean"],["delete all untracked files","yarn repo clean --dfx"]]};var $=r(o("clipanion"));var m=class extends s{constructor(){super(...arguments);this.package=$.Option.String()}async execute(){await this.$(`yarn ts-node --project ./config/tsconfig.json ./dev/tasks/compile/cjs ${this.package}`),await this.$(`yarn ts-node --project ./config/tsconfig.json ./dev/tasks/compile/esm ${this.package}`)}};m.paths=[["repo","compile"]],m.usage={category:"repo",description:"compile a package",details:"compiles as both cjs and esm with ncc",examples:[["compile {package name}","yarn repo compile @roots/bud-support"]]};var w=r(o("clipanion"));var f=class extends s{constructor(){super(...arguments);this.api=w.Option.Boolean("-a,--api",!1,{description:"build api docs"});this.site=w.Option.Boolean("-s,--site",!1,{description:"build site files"});this.readme=w.Option.Boolean("-r,--readme",!1,{description:"build readme files"})}async execute(){let t=!this.site&&!this.readme&&!this.api;(this.api||this.site||t)&&await this.$("yarn node ./site/api-documenter.build.js"),await this.$(...[this.site||t?"yarn workspace @roots/bud-docs run docusaurus build":null,this.readme||t?"yarn ts-node-transpile-only --project ./config/tsconfig.json ./dev/readme":null].filter(Boolean))}};f.paths=[["repo","docs"]],f.usage={category:"repo",description:"build docs and readme files. no flags builds everything. running with the --site flag will also build api docs.",examples:[["build all","yarn repo docs"],["build api documentation","yarn repo docs --api"],["build api documentation and site files","yarn repo docs --site"],["build readme files","yarn docs --readme"]]};var l=r(o("clipanion"));var g=class extends s{constructor(){super(...arguments);this.prettier=l.Option.Boolean("-p,--prettier",!1,{description:"run prettier"});this.eslint=l.Option.Boolean("-e,--eslint",!1,{description:"run eslint"});this.skypack=l.Option.Boolean("-s,--skypack",!1,{description:"run skypack"});this.types=l.Option.Boolean("-t,--types",!1,{description:"includes types (prettier)"});this.lib=l.Option.Boolean("-l,--lib",!1,{description:"includes lib (prettier)"})}async execute(){!this.prettier&&!this.skypack&&!this.eslint&&(this.prettier=!0,this.skypack=!0,this.eslint=!0),await this.$(...[...this.eslint?["yarn eslint ./packages/@roots/*/src/**/*.{js,jsx,ts,tsx} --config ./config/.eslintrc.js --ignore-path ./config/.eslintignore --fix","yarn eslint ./dev/**/*.{js,jsx,ts,tsx} --config ./config/.eslintrc.js --ignore-path ./config/.eslintignore  --fix","yarn eslint ./site/src/**/*.{js,jsx,ts,tsx} --config ./config/.eslintrc.js --ignore-path ./config/.eslintignore  --fix"]:[],...this.prettier?["yarn prettier ./packages/@roots/*/src/**/* --config ./config/prettier.config.js --ignore-path ./config/.prettierignore --write --ignore-unknown --loglevel silent --no-error-on-unmatched-pattern",this.lib?"yarn prettier ./packages/@roots/*/lib/**/* --config ./config/prettier.config.js  --ignore-path ./config/.prettierignore --write --ignore-unknown --loglevel silent --no-error-on-unmatched-pattern":"",this.types?"yarn prettier ./packages/@roots/*/types/**/*.d.ts --config ./config/prettier.config.js --ignore-path ./config/.prettierignore --write --ignore-unknown --loglevel silent --no-error-on-unmatched-pattern":null].filter(Boolean):[],this.skypack?"yarn workspaces foreach --no-private --exclude @roots/bud-typings -p -v run pkg":null].filter(Boolean))}};g.paths=[["repo","lint"]],g.usage={category:"repo",description:"lint repo files. run all linters by passing no flags.",examples:[["run all linters","yarn repo lint"],["run prettier","yarn repo lint --prettier"],["run eslint","yarn repo lint --eslint"],["run skypack","yarn repo lint --skypack"],["lint on type definitions as well","yarn repo lint --types"]]};var h=class extends s{async execute(){await this.$("yarn install --immutable"),await this.$("yarn repo build"),await this.$("yarn repo lint"),await this.$("yarn repo test")}};h.paths=[["repo","make"]],h.usage={category:"repo",description:"make project files same as ci",examples:[["install/build repo packages","yarn repo make"]]};var k=r(o("clipanion"));var b=class extends s{constructor(){super(...arguments);this.workers=k.Option.String("-w,--workers","50%",{description:"number of workers. default 50%."});this.update=k.Option.Boolean("--update",!1,{description:"update snapshots. default false."})}async execute(){await this.$(`yarn jest --config config/jest.config.js --verbose --maxWorkers=${this.workers} ${this.update?"--updateSnapshot":"--coverage"}`)}};b.paths=[["repo","test"]],b.usage={category:"repo",details:"test files with jest",examples:[["test","yarn repo test"],["update snapshots","yarn repo test --update"]]};var I={hooks:{afterAllInstalled:()=>{process.stdout.write(`
What a great install, am I right?
`)}},commands:[d,u,m,g,h,f,b]},F=I;return M;})();
return plugin;
}
};
