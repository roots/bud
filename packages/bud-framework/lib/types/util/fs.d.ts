/// <reference types="node" />
import filesystem from 'fs-extra';
import path from 'path';
declare const fs: {
    copy(src: string, dest: string, options?: filesystem.CopyOptions): Promise<void>;
    copy(src: string, dest: string, callback: (err: Error) => void): void;
    copy(src: string, dest: string, options: filesystem.CopyOptions, callback: (err: Error) => void): void;
    copySync(src: string, dest: string, options?: filesystem.CopyOptionsSync): void;
    copyFile(src: string, dest: string, flags?: number): Promise<void>;
    copyFile(src: string, dest: string, callback: (err: Error) => void): void;
    copyFile(src: string, dest: string, flags: number, callback: (err: Error) => void): void;
    move(src: string, dest: string, options?: filesystem.MoveOptions): Promise<void>;
    move(src: string, dest: string, callback: (err: Error) => void): void;
    move(src: string, dest: string, options: filesystem.MoveOptions, callback: (err: Error) => void): void;
    moveSync(src: string, dest: string, options?: filesystem.MoveOptions): void;
    createFile(file: string): Promise<void>;
    createFile(file: string, callback: (err: Error) => void): void;
    createFileSync(file: string): void;
    createSymlink(src: string, dest: string, type: filesystem.SymlinkType): Promise<void>;
    createSymlink(src: string, dest: string, type: filesystem.SymlinkType, callback?: (err: Error) => void): void;
    createSymlinkSync(src: string, dest: string, type: filesystem.SymlinkType): void;
    ensureDir(path: string, options?: number | filesystem.EnsureOptions): Promise<void>;
    ensureDir(path: string, options?: number | filesystem.EnsureOptions, callback?: (err: Error) => void): void;
    ensureDirSync(path: string, options?: number | filesystem.EnsureOptions): void;
    mkdirs(dir: string): Promise<void>;
    mkdirs(dir: string, callback: (err: Error) => void): void;
    mkdirp(dir: string): Promise<void>;
    mkdirp(dir: string, callback: (err: Error) => void): void;
    mkdirsSync(dir: string): void;
    mkdirpSync(dir: string): void;
    outputFile(file: string, data: any, options?: string | filesystem.WriteFileOptions): Promise<void>;
    outputFile(file: string, data: any, callback: (err: Error) => void): void;
    outputFile(file: string, data: any, options: string | filesystem.WriteFileOptions, callback: (err: Error) => void): void;
    outputFileSync(file: string, data: any, options?: string | filesystem.WriteFileOptions): void;
    readJson(file: string, options?: filesystem.ReadOptions): Promise<any>;
    readJson(file: string, callback: (err: Error, jsonObject: any) => void): void;
    readJson(file: string, options: filesystem.ReadOptions, callback: (err: Error, jsonObject: any) => void): void;
    readJSON(file: string, options?: filesystem.ReadOptions): Promise<any>;
    readJSON(file: string, callback: (err: Error, jsonObject: any) => void): void;
    readJSON(file: string, options: filesystem.ReadOptions, callback: (err: Error, jsonObject: any) => void): void;
    readJsonSync(file: string, options?: filesystem.ReadOptions): any;
    readJSONSync(file: string, options?: filesystem.ReadOptions): any;
    remove(dir: string): Promise<void>;
    remove(dir: string, callback: (err: Error) => void): void;
    removeSync(dir: string): void;
    outputJSON(file: string, data: any, options?: filesystem.WriteOptions): Promise<void>;
    outputJSON(file: string, data: any, options: filesystem.WriteOptions, callback: (err: Error) => void): void;
    outputJSON(file: string, data: any, callback: (err: Error) => void): void;
    outputJson(file: string, data: any, options?: filesystem.WriteOptions): Promise<void>;
    outputJson(file: string, data: any, options: filesystem.WriteOptions, callback: (err: Error) => void): void;
    outputJson(file: string, data: any, callback: (err: Error) => void): void;
    outputJsonSync(file: string, data: any, options?: filesystem.WriteOptions): void;
    outputJSONSync(file: string, data: any, options?: filesystem.WriteOptions): void;
    writeJSON(file: string, object: any, options?: filesystem.WriteOptions): Promise<void>;
    writeJSON(file: string, object: any, callback: (err: Error) => void): void;
    writeJSON(file: string, object: any, options: filesystem.WriteOptions, callback: (err: Error) => void): void;
    writeJson(file: string, object: any, options?: filesystem.WriteOptions): Promise<void>;
    writeJson(file: string, object: any, callback: (err: Error) => void): void;
    writeJson(file: string, object: any, options: filesystem.WriteOptions, callback: (err: Error) => void): void;
    writeJsonSync(file: string, object: any, options?: filesystem.WriteOptions): void;
    writeJSONSync(file: string, object: any, options?: filesystem.WriteOptions): void;
    ensureFile(path: string): Promise<void>;
    ensureFile(path: string, callback: (err: Error) => void): void;
    ensureFileSync(path: string): void;
    ensureLink(src: string, dest: string): Promise<void>;
    ensureLink(src: string, dest: string, callback: (err: Error) => void): void;
    ensureLinkSync(src: string, dest: string): void;
    ensureSymlink(src: string, dest: string, type?: filesystem.SymlinkType): Promise<void>;
    ensureSymlink(src: string, dest: string, type: filesystem.SymlinkType, callback: (err: Error) => void): void;
    ensureSymlink(src: string, dest: string, callback: (err: Error) => void): void;
    ensureSymlinkSync(src: string, dest: string, type?: filesystem.SymlinkType): void;
    emptyDir(path: string): Promise<void>;
    emptyDir(path: string, callback: (err: Error) => void): void;
    emptyDirSync(path: string): void;
    pathExists(path: string): Promise<boolean>;
    pathExists(path: string, callback: (err: Error, exists: boolean) => void): void;
    pathExistsSync(path: string): boolean;
    access(path: string | Buffer, callback: (err: NodeJS.ErrnoException) => void): void;
    access(path: string | Buffer, mode: number, callback: (err: NodeJS.ErrnoException) => void): void;
    access(path: string | Buffer, mode?: number): Promise<void>;
    appendFile(file: string | number | Buffer, data: any, options: {
        encoding?: string;
        mode?: string | number;
        flag?: string;
    }, callback: (err: NodeJS.ErrnoException) => void): void;
    appendFile(file: string | number | Buffer, data: any, callback: (err: NodeJS.ErrnoException) => void): void;
    appendFile(file: string | number | Buffer, data: any, options?: {
        encoding?: string;
        mode?: string | number;
        flag?: string;
    }): Promise<void>;
    chmod(path: string | Buffer, mode: string | number, callback: (err: NodeJS.ErrnoException) => void): void;
    chmod(path: string | Buffer, mode: string | number): Promise<void>;
    chown(path: string | Buffer, uid: number, gid: number): Promise<void>;
    chown(path: string | Buffer, uid: number, gid: number, callback: (err: NodeJS.ErrnoException) => void): void;
    close(fd: number, callback: (err: NodeJS.ErrnoException) => void): void;
    close(fd: number): Promise<void>;
    fchmod(fd: number, mode: string | number, callback: (err: NodeJS.ErrnoException) => void): void;
    fchmod(fd: number, mode: string | number): Promise<void>;
    fchown(fd: number, uid: number, gid: number, callback: (err: NodeJS.ErrnoException) => void): void;
    fchown(fd: number, uid: number, gid: number): Promise<void>;
    fdatasync(fd: number, callback: () => void): void;
    fdatasync(fd: number): Promise<void>;
    fstat(fd: number, callback: (err: NodeJS.ErrnoException, stats: filesystem.Stats) => any): void;
    fstat(fd: number): Promise<filesystem.Stats>;
    fsync(fd: number, callback: (err: NodeJS.ErrnoException) => void): void;
    fsync(fd: number): Promise<void>;
    ftruncate(fd: number, callback: (err: NodeJS.ErrnoException) => void): void;
    ftruncate(fd: number, len: number, callback: (err: NodeJS.ErrnoException) => void): void;
    ftruncate(fd: number, len?: number): Promise<void>;
    futimes(fd: number, atime: number, mtime: number, callback: (err: NodeJS.ErrnoException) => void): void;
    futimes(fd: number, atime: Date, mtime: Date, callback: (err: NodeJS.ErrnoException) => void): void;
    futimes(fd: number, atime: number, mtime: number): Promise<void>;
    futimes(fd: number, atime: Date, mtime: Date): Promise<void>;
    lchown(path: string | Buffer, uid: number, gid: number, callback: (err: NodeJS.ErrnoException) => void): void;
    lchown(path: string | Buffer, uid: number, gid: number): Promise<void>;
    link(srcpath: string | Buffer, dstpath: string | Buffer, callback: (err: NodeJS.ErrnoException) => void): void;
    link(srcpath: string | Buffer, dstpath: string | Buffer): Promise<void>;
    lstat(path: string | Buffer, callback: (err: NodeJS.ErrnoException, stats: filesystem.Stats) => any): void;
    lstat(path: string | Buffer): Promise<filesystem.Stats>;
    mkdir(path: string | Buffer, callback: (err: NodeJS.ErrnoException) => void): void;
    mkdir(path: string | Buffer, mode: string | number, callback: (err: NodeJS.ErrnoException) => void): void;
    mkdir(path: string | Buffer): Promise<void>;
    open(path: string | Buffer, flags: string | number, callback: (err: NodeJS.ErrnoException, fd: number) => void): void;
    open(path: string | Buffer, flags: string | number, mode: number, callback: (err: NodeJS.ErrnoException, fd: number) => void): void;
    open(path: string | Buffer, flags: string | number, mode?: number): Promise<number>;
    opendir(path: string, cb: (err: NodeJS.ErrnoException, dir: filesystem.Dir) => void): void;
    opendir(path: string, options: filesystem.OpenDirOptions, cb: (err: NodeJS.ErrnoException, dir: filesystem.Dir) => void): void;
    opendir(path: string, options?: filesystem.OpenDirOptions): Promise<filesystem.Dir>;
    read(fd: number, buffer: Buffer, offset: number, length: number, position: number, callback: (err: NodeJS.ErrnoException, bytesRead: number, buffer: Buffer) => void): void;
    read(fd: number, buffer: Buffer, offset: number, length: number, position: number): Promise<filesystem.ReadResult>;
    readFile(file: string | number | Buffer, callback: (err: NodeJS.ErrnoException, data: Buffer) => void): void;
    readFile(file: string | number | Buffer, encoding: string, callback: (err: NodeJS.ErrnoException, data: string) => void): void;
    readFile(file: string | number | Buffer, options: {
        flag?: string;
    } | {
        encoding: string;
        flag?: string;
    }, callback: (err: NodeJS.ErrnoException, data: Buffer) => void): void;
    readFile(file: string | number | Buffer, options: {
        flag?: string;
    } | {
        encoding: string;
        flag?: string;
    }): Promise<string>;
    readFile(file: string | number | Buffer, encoding: string): Promise<string>;
    readFile(file: string | number | Buffer): Promise<Buffer>;
    readdir(path: string | Buffer, callback: (err: NodeJS.ErrnoException, files: string[]) => void): void;
    readdir(path: string | Buffer): Promise<string[]>;
    readlink(path: string | Buffer, callback: (err: NodeJS.ErrnoException, linkString: string) => any): void;
    readlink(path: string | Buffer): Promise<string>;
    realpath(path: string | Buffer, callback: (err: NodeJS.ErrnoException, resolvedPath: string) => any): void;
    realpath(path: string | Buffer, cache: {
        [path: string]: string;
    }, callback: (err: NodeJS.ErrnoException, resolvedPath: string) => any): void;
    realpath(path: string | Buffer, cache?: {
        [path: string]: string;
    }): Promise<string>;
    rename(oldPath: string, newPath: string, callback: (err: NodeJS.ErrnoException) => void): void;
    rename(oldPath: string, newPath: string): Promise<void>;
    rmdir(path: string | Buffer, callback: (err: NodeJS.ErrnoException) => void): void;
    rmdir(path: string | Buffer): Promise<void>;
    stat(path: string | Buffer, callback: (err: NodeJS.ErrnoException, stats: filesystem.Stats) => any): void;
    stat(path: string | Buffer): Promise<filesystem.Stats>;
    symlink(srcpath: string | Buffer, dstpath: string | Buffer, type: import("fs").symlink.Type, callback: (err: NodeJS.ErrnoException) => void): void;
    symlink(srcpath: string | Buffer, dstpath: string | Buffer, callback: (err: NodeJS.ErrnoException) => void): void;
    symlink(srcpath: string | Buffer, dstpath: string | Buffer, type?: import("fs").symlink.Type): Promise<void>;
    truncate(path: string | Buffer, callback: (err: NodeJS.ErrnoException) => void): void;
    truncate(path: string | Buffer, len: number, callback: (err: NodeJS.ErrnoException) => void): void;
    truncate(path: string | Buffer, len?: number): Promise<void>;
    unlink(path: string | Buffer, callback: (err: NodeJS.ErrnoException) => void): void;
    unlink(path: string | Buffer): Promise<void>;
    utimes(path: string | Buffer, atime: number, mtime: number, callback: (err: NodeJS.ErrnoException) => void): void;
    utimes(path: string | Buffer, atime: Date, mtime: Date, callback: (err: NodeJS.ErrnoException) => void): void;
    utimes(path: string | Buffer, atime: number, mtime: number): Promise<void>;
    utimes(path: string | Buffer, atime: Date, mtime: Date): Promise<void>;
    write(fd: number, buffer: Buffer, offset: number, length: number, position: number, callback: (err: NodeJS.ErrnoException, written: number, buffer: Buffer) => void): void;
    write(fd: number, buffer: Buffer, offset: number, length: number, callback: (err: NodeJS.ErrnoException, written: number, buffer: Buffer) => void): void;
    write(fd: number, data: any, callback: (err: NodeJS.ErrnoException, written: number, str: string) => void): void;
    write(fd: number, data: any, offset: number, callback: (err: NodeJS.ErrnoException, written: number, str: string) => void): void;
    write(fd: number, data: any, offset: number, encoding: string, callback: (err: NodeJS.ErrnoException, written: number, str: string) => void): void;
    write(fd: number, buffer: Buffer, offset?: number, length?: number, position?: number): Promise<filesystem.WriteResult>;
    write(fd: number, data: any, offset?: number, encoding?: string): Promise<filesystem.WriteResult>;
    writeFile(file: string | number | Buffer, data: any, callback: (err: NodeJS.ErrnoException) => void): void;
    writeFile(file: string | number | Buffer, data: any, options?: string | filesystem.WriteFileOptions): Promise<void>;
    writeFile(file: string | number | Buffer, data: any, options: string | filesystem.WriteFileOptions, callback: (err: NodeJS.ErrnoException) => void): void;
    writev(fd: number, buffers: (DataView | Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array)[], position: number, cb: (err: NodeJS.ErrnoException, bytesWritten: number, buffers: (DataView | Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array)[]) => void): void;
    writev(fd: number, buffers: (DataView | Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array)[], cb: (err: NodeJS.ErrnoException, bytesWritten: number, buffers: (DataView | Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array)[]) => void): void;
    writev(fd: number, buffers: (DataView | Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array)[], position?: number): Promise<filesystem.WritevResult>;
    mkdtemp(prefix: string): Promise<string>;
    mkdtemp(prefix: string, callback: (err: NodeJS.ErrnoException, folder: string) => void): void;
    createLink: typeof filesystem.ensureLink;
    createLinkSync: typeof filesystem.ensureLinkSync;
    renameSync(oldPath: filesystem.PathLike, newPath: filesystem.PathLike): void;
    truncateSync(path: filesystem.PathLike, len?: number): void;
    ftruncateSync(fd: number, len?: number): void;
    chownSync(path: filesystem.PathLike, uid: number, gid: number): void;
    fchownSync(fd: number, uid: number, gid: number): void;
    lchownSync(path: filesystem.PathLike, uid: number, gid: number): void;
    chmodSync(path: filesystem.PathLike, mode: string | number): void;
    fchmodSync(fd: number, mode: string | number): void;
    lchmod: typeof filesystem.lchmod;
    lchmodSync(path: filesystem.PathLike, mode: string | number): void;
    statSync(path: filesystem.PathLike): filesystem.Stats;
    statSync(path: filesystem.PathLike, options: filesystem.BigIntOptions): filesystem.BigIntStats;
    statSync(path: filesystem.PathLike, options: filesystem.StatOptions): filesystem.Stats | filesystem.BigIntStats;
    fstatSync(fd: number): filesystem.Stats;
    lstatSync(path: filesystem.PathLike): filesystem.Stats;
    linkSync(existingPath: filesystem.PathLike, newPath: filesystem.PathLike): void;
    symlinkSync(target: filesystem.PathLike, path: filesystem.PathLike, type?: import("fs").symlink.Type): void;
    readlinkSync(path: filesystem.PathLike, options?: "ascii" | "utf8" | "utf-8" | "utf16le" | "ucs2" | "ucs-2" | "base64" | "latin1" | "binary" | "hex" | filesystem.BaseEncodingOptions): string;
    readlinkSync(path: filesystem.PathLike, options: filesystem.BufferEncodingOption): Buffer;
    readlinkSync(path: filesystem.PathLike, options?: string | filesystem.BaseEncodingOptions): string | Buffer;
    realpathSync: typeof filesystem.realpathSync;
    unlinkSync(path: filesystem.PathLike): void;
    rmdirSync(path: filesystem.PathLike, options?: filesystem.RmDirOptions): void;
    mkdirSync(path: filesystem.PathLike, options: filesystem.MakeDirectoryOptions & {
        recursive: true;
    }): string;
    mkdirSync(path: filesystem.PathLike, options?: string | number | (filesystem.MakeDirectoryOptions & {
        recursive?: false;
    })): void;
    mkdirSync(path: filesystem.PathLike, options?: string | number | filesystem.MakeDirectoryOptions): string;
    mkdtempSync(prefix: string, options?: "ascii" | "utf8" | "utf-8" | "utf16le" | "ucs2" | "ucs-2" | "base64" | "latin1" | "binary" | "hex" | filesystem.BaseEncodingOptions): string;
    mkdtempSync(prefix: string, options: filesystem.BufferEncodingOption): Buffer;
    mkdtempSync(prefix: string, options?: string | filesystem.BaseEncodingOptions): string | Buffer;
    readdirSync(path: filesystem.PathLike, options?: "ascii" | "utf8" | "utf-8" | "utf16le" | "ucs2" | "ucs-2" | "base64" | "latin1" | "binary" | "hex" | {
        encoding: BufferEncoding;
        withFileTypes?: false;
    }): string[];
    readdirSync(path: filesystem.PathLike, options: "buffer" | {
        encoding: "buffer";
        withFileTypes?: false;
    }): Buffer[];
    readdirSync(path: filesystem.PathLike, options?: "ascii" | "utf8" | "utf-8" | "utf16le" | "ucs2" | "ucs-2" | "base64" | "latin1" | "binary" | "hex" | (filesystem.BaseEncodingOptions & {
        withFileTypes?: false;
    })): string[] | Buffer[];
    readdirSync(path: filesystem.PathLike, options: filesystem.BaseEncodingOptions & {
        withFileTypes: true;
    }): filesystem.Dirent[];
    closeSync(fd: number): void;
    openSync(path: filesystem.PathLike, flags: string | number, mode?: string | number): number;
    utimesSync(path: filesystem.PathLike, atime: string | number | Date, mtime: string | number | Date): void;
    futimesSync(fd: number, atime: string | number | Date, mtime: string | number | Date): void;
    fsyncSync(fd: number): void;
    writeSync(fd: number, buffer: DataView | Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array, offset?: number, length?: number, position?: number): number;
    writeSync(fd: number, string: string, position?: number, encoding?: BufferEncoding): number;
    readSync(fd: number, buffer: DataView | Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array, offset: number, length: number, position: number): number;
    readSync(fd: number, buffer: DataView | Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array, opts?: filesystem.ReadSyncOptions): number;
    readFileSync(path: string | number | Buffer | import("url").URL, options?: {
        encoding?: null;
        flag?: string;
    }): Buffer;
    readFileSync(path: string | number | Buffer | import("url").URL, options: "ascii" | "utf8" | "utf-8" | "utf16le" | "ucs2" | "ucs-2" | "base64" | "latin1" | "binary" | "hex" | {
        encoding: BufferEncoding;
        flag?: string;
    }): string;
    readFileSync(path: string | number | Buffer | import("url").URL, options?: "ascii" | "utf8" | "utf-8" | "utf16le" | "ucs2" | "ucs-2" | "base64" | "latin1" | "binary" | "hex" | (filesystem.BaseEncodingOptions & {
        flag?: string;
    })): string | Buffer;
    writeFileSync(path: string | number | Buffer | import("url").URL, data: string | DataView | Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array, options?: import("fs").WriteFileOptions): void;
    appendFileSync(file: string | number | Buffer | import("url").URL, data: string | Uint8Array, options?: import("fs").WriteFileOptions): void;
    watchFile(filename: filesystem.PathLike, options: {
        persistent?: boolean;
        interval?: number;
    }, listener: (curr: filesystem.Stats, prev: filesystem.Stats) => void): void;
    watchFile(filename: filesystem.PathLike, listener: (curr: filesystem.Stats, prev: filesystem.Stats) => void): void;
    unwatchFile(filename: filesystem.PathLike, listener?: (curr: filesystem.Stats, prev: filesystem.Stats) => void): void;
    watch(filename: filesystem.PathLike, options: "ascii" | "utf8" | "utf-8" | "utf16le" | "ucs2" | "ucs-2" | "base64" | "latin1" | "binary" | "hex" | {
        encoding?: BufferEncoding;
        persistent?: boolean;
        recursive?: boolean;
    }, listener?: (event: string, filename: string) => void): filesystem.FSWatcher;
    watch(filename: filesystem.PathLike, options: "buffer" | {
        encoding: "buffer";
        persistent?: boolean;
        recursive?: boolean;
    }, listener?: (event: string, filename: Buffer) => void): filesystem.FSWatcher;
    watch(filename: filesystem.PathLike, options: string | {
        encoding?: BufferEncoding;
        persistent?: boolean;
        recursive?: boolean;
    }, listener?: (event: string, filename: string | Buffer) => void): filesystem.FSWatcher;
    watch(filename: filesystem.PathLike, listener?: (event: string, filename: string) => any): filesystem.FSWatcher;
    exists: typeof filesystem.exists;
    existsSync(path: filesystem.PathLike): boolean;
    accessSync(path: filesystem.PathLike, mode?: number): void;
    createReadStream(path: filesystem.PathLike, options?: string | {
        flags?: string;
        encoding?: BufferEncoding;
        fd?: number;
        mode?: number;
        autoClose?: boolean;
        emitClose?: boolean;
        start?: number;
        end?: number;
        highWaterMark?: number;
    }): filesystem.ReadStream;
    createWriteStream(path: filesystem.PathLike, options?: string | {
        flags?: string;
        encoding?: BufferEncoding;
        fd?: number;
        mode?: number;
        autoClose?: boolean;
        emitClose?: boolean;
        start?: number;
        highWaterMark?: number;
    }): filesystem.WriteStream;
    fdatasyncSync(fd: number): void;
    copyFileSync(src: filesystem.PathLike, dest: filesystem.PathLike, flags?: number): void;
    writevSync(fd: number, buffers: (DataView | Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array)[], position?: number): number;
    readv: typeof filesystem.readv;
    readvSync(fd: number, buffers: (DataView | Int8Array | Uint8Array | Uint8ClampedArray | Int16Array | Uint16Array | Int32Array | Uint32Array | Float32Array | Float64Array)[], position?: number): number;
    opendirSync(path: string, options?: filesystem.OpenDirOptions): filesystem.Dir;
    promises: typeof filesystem.promises;
    Stats: typeof filesystem.Stats;
    Dirent: typeof filesystem.Dirent;
    Dir: typeof filesystem.Dir;
    ReadStream: typeof filesystem.ReadStream;
    WriteStream: typeof filesystem.WriteStream;
    constants: typeof filesystem.constants;
    BigIntStats: typeof filesystem.BigIntStats;
    normalize(p: string): string;
    join(...paths: string[]): string;
    resolve(...pathSegments: string[]): string;
    isAbsolute(p: string): boolean;
    relative(from: string, to: string): string;
    dirname(p: string): string;
    basename(p: string, ext?: string): string;
    extname(p: string): string;
    sep: string;
    delimiter: string;
    parse(p: string): path.ParsedPath;
    format(pP: path.FormatInputPathObject): string;
    toNamespacedPath(path: string): string;
    posix: path.PlatformPath;
    win32: path.PlatformPath;
};
export { fs };
//# sourceMappingURL=fs.d.ts.map