{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.18.19",
    "schemaVersion": 1004,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@container",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@core",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@extension",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@config",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@hook",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@filter",
          "syntaxKind": "block",
          "allowMultiple": true
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true,
        "@container": true,
        "@core": true,
        "@extension": true,
        "@config": true,
        "@hook": true,
        "@filter": true
      }
    }
  },
  "kind": "Package",
  "canonicalReference": "@roots/container!",
  "docComment": "/**\n * The {@link @roots/container# | @roots/container} package provides a simple chainable interface for working with collections of data\n *\n * @packageDocumentation\n */\n",
  "name": "@roots/container",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@roots/container!",
      "name": "",
      "members": [
        {
          "kind": "Class",
          "canonicalReference": "@roots/container!Container:class",
          "docComment": "/**\n * Provides a simple chainable interface for working with collections of data\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Container<I = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "I",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "Container",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "@roots/container!Container:constructor(1)",
              "docComment": "/**\n * Class constructor\n *\n * @param repository - Key-value data store\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(repository?: "
                },
                {
                  "kind": "Content",
                  "text": "I"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "repository",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#all:member(1)",
              "docComment": "/**\n * Returns the repository in its entirety as a plain JS object\n *\n * @example\n * ```js\n * container.all()\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "all(): "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "all"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#count:member(1)",
              "docComment": "/**\n * Return a number indicating the length of a matched key in the repository.\n *\n * If no key is provided, returns the length of the repository.\n *\n * @param key - search key\n *\n * @returns count of items\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "count(key?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "count"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#each:member(1)",
              "docComment": "/**\n * Use each value as parameters in a supplied callback\n *\n * @example\n * ```js\n * container.withEntries('key', (key, value) => doSomething)\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "each(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", callFn: "
                },
                {
                  "kind": "Content",
                  "text": "(key: any, value: any) => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "callFn",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "each"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#every:member(1)",
              "docComment": "/**\n * Calls a supplied function for every repository value, passing the item's key and value as callback parameters.\n *\n * @example\n * ```js\n * container.withEntries('key', (key, value) => doSomething)\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "every(fn: "
                },
                {
                  "kind": "Content",
                  "text": "(key: string, value: any) => any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "every"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#fromEntries:member(1)",
              "docComment": "/**\n * Merges object created from an array of tuples with the repository.\n *\n * @example\n * ```js\n * container.getEntries()\n * ```\n *\n * @example\n * ```js\n * container.getEntries('key')\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "fromEntries(entries: "
                },
                {
                  "kind": "Content",
                  "text": "[string, any][]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "entries",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "fromEntries"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#get:member(1)",
              "docComment": "/**\n * Returns a value from the the repository.\n *\n * @remarks\n *\n * If no key is passed the container store will be returned.\n *\n * @example\n * ```js\n * container.get('container.container-item')\n * ```\n *\n * @example\n * ```js\n * container.get(['container', 'container-item'])\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get<T = "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ">(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "get"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#getEntries:member(1)",
              "docComment": "/**\n * Returns a repository key and value as a tuple\n *\n * @remarks\n *\n * If no key is passed the container store will be used.\n *\n * @example\n * ```js\n * container.getEntries()\n * ```\n *\n * @example\n * ```js\n * container.getEntries('key')\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getEntries<T = "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ">(key?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "[string, "
                },
                {
                  "kind": "Reference",
                  "text": "ValueOf",
                  "canonicalReference": "type-fest!ValueOf:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>][]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getEntries"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#getKeys:member(1)",
              "docComment": "/**\n * Returns an array of values of the enumerable keys of a repository object\n *\n * @example\n * ```js\n * container.getKeys('item')\n * // => returns keys of container.repository[item]\n * ```\n *\n * @example\n * ```js\n * container.getKeys()\n * // => returns keys of container.repository\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getKeys(key?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getKeys"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#getMap:member(1)",
              "docComment": "/**\n * Get a repository item as a {@link MapConstructor}.\n *\n * @remarks\n *\n * If no key is passed the container store is mapped.\n *\n * @example\n *\n * Returns `repository.item` as a Map:\n * ```js\n * container.getMap('item')\n * ```\n *\n * @example\n *\n * Returns the entire repository as a Map:\n * ```js\n * container.getMap()\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getMap(key?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Map",
                  "canonicalReference": "!Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string, any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getMap"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#getValues:member(1)",
              "docComment": "/**\n * Returns an array of values of the enumerable properties of a repository object\n *\n * @example\n * ```js\n * container.getValues('container.container-item')\n * ```\n *\n * @example\n * ```js\n * container.getValues()\n * // => returns values from entire store\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getValues(key?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getValues"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#has:member(1)",
              "docComment": "/**\n * Return a boolean indicating if a given key exists.\n *\n * @example\n * ```js\n * container.has('my-key')\n * // true if container.repository['my-key'] exists\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "has(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "has"
            },
            {
              "kind": "Property",
              "canonicalReference": "@roots/container!Container#ident:member",
              "docComment": "/**\n * Identifier\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "ident?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "ident",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#is:member(1)",
              "docComment": "/**\n * Return a boolean indicating if the given key matches the given value.\n *\n * @example\n * ```js\n * container.is('my-key', {whatever: 'value'})\n * // True if container.repository['my-key'] === {whatever: 'value'}\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "is(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "is"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#isArray:member(1)",
              "docComment": "/**\n * Return true if object is an array.\n *\n * @param key - The key to check\n *\n * @returns True if the value is an array\n *\n * @example\n * ```js\n * container.isArray('my-key')\n * // True if container.repository['my-key'] is an array\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isArray(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#isDefined:member(1)",
              "docComment": "/**\n * Return true if object is defined.\n *\n * @param key - The key to check.\n *\n * @returns True if the key is defined.\n *\n * @example\n *\n * True if container has a 'my-key' entry with a definite value.\n * ```js\n * container.isDefined('my-key')\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isDefined(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isDefined"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#isEmpty:member(1)",
              "docComment": "/**\n * Checks if value is empty. A value is considered empty unless it’s an arguments object, array, string, or jQuery-like collection with a length greater than 0 or an object with own enumerable properties.\n *\n * @param key - search key\n *\n * @returns True if object is empty.\n *\n * @example\n * ```js\n * container.isEmpty('my-key')\n * // True if object associated with 'my-key' is empty.\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isEmpty(key?: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isEmpty"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#isFalse:member(1)",
              "docComment": "/**\n * Return a boolean indicating if the given key's value is false\n *\n * @param key - The key to check\n *\n * @returns True if the key's value is false\n *\n * @example\n * ```js\n * container.isFalse('my-key')\n * // True if container.repository['my-key'] === false\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isFalse(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isFalse"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#isFunction:member(1)",
              "docComment": "/**\n * Return true if object is a function\n *\n * @param key - The key to check.\n *\n * @returns True if object is a function.\n *\n * @example\n * ```js\n * container.isFunction('my-key')\n * // True if object associated with 'my-key' is a fn.\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isFunction(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isFunction"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#isInstanceOf:member(1)",
              "docComment": "/**\n * Return true if object is an instance of a class.\n *\n * @param key - The key to check.\n *\n * @param instance - The class to check.\n *\n * @returns True if object is an instance of the class.\n *\n * @example\n * ```js\n * container.isInstanceOf('my-key', MyClass)\n * // True if object associated with 'my-key' is an instance of MyClass.\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isInstanceOf(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", instance: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "instance",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "isInstanceOf"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#isInstanceOfAny:member(1)",
              "docComment": "/**\n * Return true if object is an instance of any of the classes.\n *\n * @param key - \n *\n * @param instances - \n *\n * @returns \n *\n * @example\n * ```js\n * container.isInstanceOfAny('my-key', [MyClass, MyOtherClass])\n * // True if object associated with 'my-key' is an instance of MyClass or MyOtherClass.\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isInstanceOfAny(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", instances: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "instances",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "isInstanceOfAny"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#isNotArray:member(1)",
              "docComment": "/**\n * Return true if object is not an array.\n *\n * @param key - The key to check\n *\n * @returns True if object is not an array\n *\n * @example\n * ```js\n * container.isNotArray('my-key')\n * // True if container.repository['my-key'] is not an array\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isNotArray(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isNotArray"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#isNotEmpty:member(1)",
              "docComment": "/**\n * Checks if value is not empty. A value is considered empty unless it’s an arguments object, array, string, or jQuery-like collection with a length greater than 0 or an object with own enumerable properties.\n *\n * @param key - search key\n *\n * @returns True if object is not empty.\n *\n * @example\n * ```js\n * container.isNotEmpty('my-key')\n * // True if object associated with 'my-key' is not empty.\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isNotEmpty(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isNotEmpty"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#isNotFunction:member(1)",
              "docComment": "/**\n * Return true if object is not a function\n *\n * @param key - The key to check.\n *\n * @returns True if object is not a function.\n *\n * @example\n * ```js\n * container.isNotFunction('my-key')\n * // True if object associated with 'my-key' is not a fn.\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isNotFunction(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isNotFunction"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#isNotInstanceOf:member(1)",
              "docComment": "/**\n * Return true if object is not an instance of a class.\n *\n * @param key - \n *\n * @param instance - \n *\n * @returns \n *\n * @example\n * ```js\n * container.isNotInstanceOf('my-key', MyClass)\n * // True if object associated with 'my-key' is not an instance of MyClass.\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isNotInstanceOf(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", instance: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "instance",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "isNotInstanceOf"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#isNotInstanceOfAny:member(1)",
              "docComment": "/**\n * Return true if object is not an instance of any of the classes.\n *\n * @param key - search key\n *\n * @param instances - classes\n *\n * @returns \n *\n * @example\n * ```js\n * container.isNotInstanceOfAny('my-key', [MyClass, MyOtherClass])\n * // True if object associated with 'my-key' is not an instance of MyClass or MyOtherClass.\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isNotInstanceOfAny(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", instances: "
                },
                {
                  "kind": "Content",
                  "text": "any[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "instances",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "isNotInstanceOfAny"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#isNotNull:member(1)",
              "docComment": "/**\n * Return true if object is not null.\n *\n * @param key - The key to check\n *\n * @returns True if object is not null\n *\n * @example\n * ```js\n * container.isNotNull('my-key')\n * // True if container.repository['my-key'] is not null\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isNotNull(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isNotNull"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#isNotNumber:member(1)",
              "docComment": "/**\n * Return true if object is not a number.\n *\n * @param key - The key to check\n *\n * @returns True if object is not a number\n *\n * @example\n * ```js\n * container.isNumber('my-key')\n * // True if container.repository['my-key'] is not a number\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isNotNumber(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isNotNumber"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#isNotString:member(1)",
              "docComment": "/**\n * Return true if object is not a string.\n *\n * @param key - The key to check\n *\n * @returns True if object is not a string\n *\n * @example\n * ```js\n * container.isString('my-key')\n * // True if container.repository['my-key'] is not a string\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isNotString(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isNotString"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#isNull:member(1)",
              "docComment": "/**\n * Return true if object is null.\n *\n * @param key - The key to check\n *\n * @returns True if object is null\n *\n * @example\n * ```js\n * container.isNull('my-key')\n * // True if container.repository['my-key'] is null\n * ```\n *\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isNull(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isNull"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#isNumber:member(1)",
              "docComment": "/**\n * Return true if object is a number.\n *\n * @param key - The key to check\n *\n * @returns True if object is a number\n *\n * @example\n * ```js\n * container.isNumber('my-key')\n * // True if container.repository['my-key'] is a number\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isNumber(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isNumber"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#isString:member(1)",
              "docComment": "/**\n * Return true if object is a string.\n *\n * @param key - The key to check\n *\n * @returns True if object is a string\n *\n * @example\n * ```js\n * container.isString('my-key')\n * // True if container.repository['my-key'] is a string\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isString(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isString"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#isTrue:member(1)",
              "docComment": "/**\n * Return a boolean indicating if the given key's value is true\n *\n * @param key - The key to check\n *\n * @returns True if the key's value is true\n *\n * @example\n * ```js\n * container.isTrue('my-key')\n * // True if container.repository['my-key'] === true\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isTrue(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isTrue"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#isUndefined:member(1)",
              "docComment": "/**\n * Return true if object is not defined.\n *\n * @param key - The key to check.\n *\n * @returns True if the key is not defined.\n *\n * @example\n * ```js\n * container.isDefined('my-key')\n * // True if container has a 'my-key' entry with a definite value.\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "isUndefined(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "isUndefined"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#merge:member(1)",
              "docComment": "/**\n * Merge a supplied value with an existing repository value\n *\n * @param key - The key of the item to merge\n *\n * @param value - The value to merge with the existing value\n *\n * @example\n * ```js\n * container.merge('key', {merge: values})\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "merge(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "merge"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#mergeStore:member(1)",
              "docComment": "/**\n * Merge values onto the container store.\n *\n * @param values - Values to merge onto the container store\n *\n * @returns The container instance\n *\n * @example\n * ```js\n * container.mergeStore({test: 'foo'})\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mergeStore(values: "
                },
                {
                  "kind": "Reference",
                  "text": "Repository",
                  "canonicalReference": "@roots/container!Repository:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "values",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "mergeStore"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#mutate:member(1)",
              "docComment": "/**\n * Mutate a repository item\n *\n * @param key - The key of the item to mutate\n *\n * @param mutationFn - The mutation function to run on the item\n *\n * @example\n * ```js\n * container.mutate('key', currentValue => modifiedValue)\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mutate(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", mutationFn: "
                },
                {
                  "kind": "Content",
                  "text": "(value?: any) => any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "mutationFn",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "mutate"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#mutateStore:member(1)",
              "docComment": "/**\n * Runs the entire repository through the supplied fn and returns the transformed value. The transformed repository replaces the original.\n *\n * @example\n * ```js\n * container.mutate('key', currentValue => modifiedValue)\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mutateStore(mutationFn: "
                },
                {
                  "kind": "Content",
                  "text": "(value?: I) => I"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "mutationFn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "mutateStore"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#remove:member(1)",
              "docComment": "/**\n * delete\n *\n * Delete an entry from the repository\n *\n * @example\n * ```js\n * container.remove('my-key')\n * // Remove container.repository['my-key']\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "remove(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "remove"
            },
            {
              "kind": "Property",
              "canonicalReference": "@roots/container!Container#repository:member",
              "docComment": "/**\n * The container store\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "repository: "
                },
                {
                  "kind": "Reference",
                  "text": "Record",
                  "canonicalReference": "!Record:type"
                },
                {
                  "kind": "Content",
                  "text": "<string, any>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "repository",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#set:member(1)",
              "docComment": "/**\n * Set a repository value\n *\n * @example\n * ```js\n * container.set('key', value)\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "set(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", value: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "set"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#setStore:member(1)",
              "docComment": "/**\n * Replace the store with an all new set of values\n *\n * @example\n * ```js\n * container.setStore({\n *  new: ['store', 'contents'],\n * })\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setStore(repository: "
                },
                {
                  "kind": "Reference",
                  "text": "Repository",
                  "canonicalReference": "@roots/container!Repository:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "repository",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "setStore"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#transform:member(1)",
              "docComment": "/**\n * Retrieve a container item, running it through the supplied fn.\n *\n * @remarks\n *\n * Returns the transformed value.\n *\n * @param key - The key of the item to transform\n *\n * @param fn - The function to transform the item with\n *\n * @example\n * ```js\n * container.transform('key', currentValue => modifiedValue)\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transform(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", mutationFn: "
                },
                {
                  "kind": "Content",
                  "text": "(value?: any) => any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "mutationFn",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "transform"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#transformStore:member(1)",
              "docComment": "/**\n * Runs the entire repository through the supplied fn and returns the transformed value.\n *\n * @param fn - Function to run on the repository\n *\n * @returns The transformed repository\n *\n * @example\n * ```js\n * container.transform(store=> modifiedStore)\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "transformStore(transformFn: "
                },
                {
                  "kind": "Content",
                  "text": "(value: any) => any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "transformFn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "transformStore"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/container!Container#unique:member(1)",
              "docComment": "/**\n * Returns unique elements of an array item\n *\n * @example\n * ```js\n * container.unique('item')\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "unique(key: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "key",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "unique"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "@roots/container!Repository:interface",
          "docComment": "/**\n * Indexed container value store.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Repository extends "
            },
            {
              "kind": "Reference",
              "text": "Record",
              "canonicalReference": "!Record:type"
            },
            {
              "kind": "Content",
              "text": "<string, any> "
            }
          ],
          "releaseTag": "Public",
          "name": "Repository",
          "members": [],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        }
      ]
    }
  ]
}
