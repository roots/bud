{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.19.4",
    "schemaVersion": 1004,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@todo",
          "syntaxKind": "block",
          "allowMultiple": true
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true,
        "@todo": true
      }
    }
  },
  "kind": "Package",
  "canonicalReference": "@roots/bud-hooks!",
  "docComment": "/**\n * Hooks system used for framework eventing.\n *\n * @remarks\n *\n * - 💁 Composable - Build exceptional applications with a modular, configurable build system\n *\n * - 💪 Modern - Modern framework that scales from a single file to thousands of lines of code\n *\n * - 🌱 Easy - Low bundle size and fast build times\n *\n * @see\n *\n * https://roots.io/bud\n *\n * @see\n *\n * https://github.com/roots/bud\n *\n * @packageDocumentation\n */\n",
  "name": "@roots/bud-hooks",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@roots/bud-hooks!",
      "name": "",
      "members": [
        {
          "kind": "Class",
          "canonicalReference": "@roots/bud-hooks!Hooks:class",
          "docComment": "/**\n * Service allowing for fitering values through callbacks.\n *\n * @example\n *\n * Add a new entry to the `webpack.externals` configuration:\n * ```ts\n * hooks.on(\n *   'build/externals',\n *   externals => ({\n *     ...externals,\n *     $: 'jquery',\n *   }),\n * )\n * ```\n *\n * @example\n *\n * Change the `webpack.output.filename` format:\n * ```ts\n * hooks.on(\n *   'build.output.filename',\n *   () => '[name].[hash:4]',\n * )\n * ```\n *\n * @example\n *\n * Create a new filter for a value:\n * ```ts\n * hooks.filter('my-event-name', DEFAULT_VALUE)\n * ```\n *\n * @example\n *\n * Create a new async filter for a value:\n * ```ts\n * await hooks.filterAsync('my-event-name', async () => DEFAULT_VALUE)\n * ```\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Hooks extends "
            },
            {
              "kind": "Reference",
              "text": "Service",
              "canonicalReference": "@roots/bud-framework!Service:class"
            },
            {
              "kind": "Content",
              "text": " "
            },
            {
              "kind": "Content",
              "text": "implements "
            },
            {
              "kind": "Reference",
              "text": "Contract",
              "canonicalReference": "@roots/bud-framework!Hooks:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Hooks",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "@roots/bud-hooks!Hooks#async:member(1)",
              "docComment": "/**\n * Register a function to filter a value.\n *\n * @remarks\n *\n * If a filter calls for this name the function is then run, passing whatever data along for modification. If more than one hook is registered to a name, they will be called sequentially in the order they were registered, with each hook's output used as the input for the next.\n *\n * @example\n * ```js\n * app.hooks.on(\n *   'namespace.key',\n *   value => 'replaced by this string',\n * )\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "async<T extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof "
                },
                {
                  "kind": "Reference",
                  "text": "Contract.Map",
                  "canonicalReference": "@roots/bud-framework!Hooks.Map:interface"
                },
                {
                  "kind": "Content",
                  "text": " & string"
                },
                {
                  "kind": "Content",
                  "text": ">(id: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ", callback: "
                },
                {
                  "kind": "Reference",
                  "text": "Contract.Map",
                  "canonicalReference": "@roots/bud-framework!Hooks.Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "[T] | ((value: "
                },
                {
                  "kind": "Reference",
                  "text": "Contract.Map",
                  "canonicalReference": "@roots/bud-framework!Hooks.Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "[T]) => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Contract.Map",
                  "canonicalReference": "@roots/bud-framework!Hooks.Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "[T]>)"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Framework",
                  "canonicalReference": "@roots/bud-framework!Framework:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 16,
                "endIndex": 17
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 15
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "async"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/bud-hooks!Hooks#filter:member(1)",
              "docComment": "/**\n * Hooks filter\n *\n * @remarks\n *\n * The other side of bud.hooks.on. Passes a key and a value. If any filters are registered on that key they will transform the output before it is returned.\n *\n * @example\n * ```js\n * bud.hooks.filter(\n *   'namespace.Key.event',\n *   ['array', 'of', 'items'],\n * )\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "filter<T extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof "
                },
                {
                  "kind": "Reference",
                  "text": "Contract.Map",
                  "canonicalReference": "@roots/bud-framework!Hooks.Map:interface"
                },
                {
                  "kind": "Content",
                  "text": " & string"
                },
                {
                  "kind": "Content",
                  "text": ">(id: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ", value?: "
                },
                {
                  "kind": "Reference",
                  "text": "Contract.Map",
                  "canonicalReference": "@roots/bud-framework!Hooks.Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "[T] | ((value?: "
                },
                {
                  "kind": "Reference",
                  "text": "Contract.Map",
                  "canonicalReference": "@roots/bud-framework!Hooks.Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "[T]) => any)"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Contract.Map",
                  "canonicalReference": "@roots/bud-framework!Hooks.Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "[T]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 14
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 11
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "filter"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/bud-hooks!Hooks#filterAsync:member(1)",
              "docComment": "/**\n * Asyncronous hook filter\n *\n * @remarks\n *\n * This method is used to filter a hook event.\n *\n * @example\n * ```js\n * bud.hooks.filter(\n *   'namespace.Key.event',\n *   ['array', 'of', 'items'],\n * )\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "filterAsync<T extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof "
                },
                {
                  "kind": "Reference",
                  "text": "Contract.Map",
                  "canonicalReference": "@roots/bud-framework!Hooks.Map:interface"
                },
                {
                  "kind": "Content",
                  "text": " & string"
                },
                {
                  "kind": "Content",
                  "text": ">(id: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ", value?: "
                },
                {
                  "kind": "Reference",
                  "text": "Contract.Map",
                  "canonicalReference": "@roots/bud-framework!Hooks.Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "[T] | ((value?: "
                },
                {
                  "kind": "Reference",
                  "text": "Contract.Map",
                  "canonicalReference": "@roots/bud-framework!Hooks.Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "[T]) => any)"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Contract.Map",
                  "canonicalReference": "@roots/bud-framework!Hooks.Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "[T]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 16
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 11
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "filterAsync"
            },
            {
              "kind": "Method",
              "canonicalReference": "@roots/bud-hooks!Hooks#on:member(1)",
              "docComment": "/**\n * Register a function to filter a value.\n *\n * @remarks\n *\n * If a filter calls for this name the function is then run, passing whatever data along for modification. If more than one hook is registered to a name, they will be called sequentially in the order they were registered, with each hook's output used as the input for the next.\n *\n * @example\n * ```js\n * app.hooks.on(\n *   'namespace.key',\n *   value => 'replaced by this string',\n * )\n * ```\n *\n * @decorator\n *\n * `@bind`\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on<T extends "
                },
                {
                  "kind": "Content",
                  "text": "keyof "
                },
                {
                  "kind": "Reference",
                  "text": "Contract.Map",
                  "canonicalReference": "@roots/bud-framework!Hooks.Map:interface"
                },
                {
                  "kind": "Content",
                  "text": " & string"
                },
                {
                  "kind": "Content",
                  "text": ">(id: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ", callback: "
                },
                {
                  "kind": "Reference",
                  "text": "Contract.Map",
                  "canonicalReference": "@roots/bud-framework!Hooks.Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "[T] | ((value: "
                },
                {
                  "kind": "Reference",
                  "text": "Contract.Map",
                  "canonicalReference": "@roots/bud-framework!Hooks.Map:interface"
                },
                {
                  "kind": "Content",
                  "text": "[T]) => any)"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Framework",
                  "canonicalReference": "@roots/bud-framework!Framework:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 12,
                "endIndex": 13
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "id",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 7,
                    "endIndex": 11
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "T",
                  "constraintTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ],
              "name": "on"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": [
            {
              "startIndex": 4,
              "endIndex": 6
            }
          ]
        }
      ]
    }
  ]
}
