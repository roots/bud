[{"title":"Release: 5.0.0","type":0,"sectionRef":"#","url":"releases/5.0.0","content":"","keywords":""},{"title":"Breaking​","type":1,"pageTitle":"Release: 5.0.0","url":"releases/5.0.0#breaking","content":"@roots/bud-cli has been deprecated. CLI functionality is packaged with @roots/bud.bud.use method is now asynchronous.bud.build.make method is now asynchronous.Hook key build now refers to an asynchronous filter.Hook key build.plugins now refers to an asynchronous filter.bud.extensions.enqueue can be used to enqueue a plugin and returns Bud instance for chaining.@roots/bud no longer exports Framework. Use Bud or import Framework from @roots/bud-framework instead. "},{"title":"Added​","type":1,"pageTitle":"Release: 5.0.0","url":"releases/5.0.0#added","content":"Yaml, json5 and TypeScript config file support. Multi-compiler support: bud.make will create a new Bud instance for you to configure.bud.get will retrieve a previously made child instance for further configuration.bud.set allows setting a Bud instance as a bud.children entry.bud.root always returns the parent compiler. If called from the parent it will return itself.bud.isRoot will be true in the parent context.bud.hasChildren will be true in the parent context if there are child Bud instances. Several new hooks: event.build.make.before is called just before the webpack config is created (async).event.build.make.after is called just after the webpack config is created (async).event.compiler.before is called just before the final config is passed to webpack.event.compiler.after is called just after the final config is passed to webpack. New CLI commands: bud clean - removes dist and cache filesbud doctor - check for missing peer dependencies and configuration errorsbud install - automatically install/update required dependenciesbud serve - start the development server and initiate hot module reloading New bud build flags: --target Target a specific Bud instance to be built in isolation. Can be passed multiple times to target more than one compiler.--[no]-cache Toggle filesystem caching. [default: true]--cache.type Set the cache type. Can be filesystem or memory. [default: filesystem]--location.[src|dist|project|storage] Set a project disk location--[no]-log - Toggle logging [default: true]--[no]-log.level - Set logging level (v, vv, vvv, vvvv) [default: vvv]--[no]-log.papertrail - Allow logger lines to overwrite the previous line from the same scope [default: --no-log.papertrail]--log-secret - Suppress a string from logger output (can use multiple times) [default: --log-secret {cwd}]--[no]-dashboard - Toggle the bud dashboard [default: --dashboard]...many more! add --help after any command to see what options are available. example project demonstrating how to use off-the-shelf webpack plugins with bud.use "},{"title":"Improved​","type":1,"pageTitle":"Release: 5.0.0","url":"releases/5.0.0#improved","content":"Greatly improved performance. The entire Bud lifecycle is asynchronous.Extensions that follow the bud-* naming convention are now automatically registered and booted.Peer dependency requirements are now checked. Missing dependencies will not throw an error but will be logged.bud.use now supports using Webpack plugins directly.Informative logging.The CLI and dashboard have a fresh coat of paint.New notification center integration (MacOS only) "},{"title":"Internal​","type":1,"pageTitle":"Release: 5.0.0","url":"releases/5.0.0#internal","content":"@roots/bud-typings has been deprecated.Added @roots/yarn-plugin-repo to provide utilities in the yarn repo namespace. "},{"title":"Contributors​","type":1,"pageTitle":"Release: 5.0.0","url":"releases/5.0.0#contributors","content":"Thanks to all the contributors! "},{"title":"index","type":0,"sectionRef":"#","url":"api/","content":"","keywords":""},{"title":"API Reference​","type":1,"pageTitle":"index","url":"api/#api-reference","content":""},{"title":"Packages​","type":1,"pageTitle":"index","url":"api/#packages","content":"Package\tDescriptionbud\t "},{"title":"bud.assets","type":0,"sectionRef":"#","url":"docs/bud.assets","content":"","keywords":""},{"title":"Signature​","type":1,"pageTitle":"bud.assets","url":"docs/bud.assets#signature","content":"bud.assets.d.ts type Assets = ( this: Framework paths: string[] ) =&gt; Framework Copy "},{"title":"Usage​","type":1,"pageTitle":"bud.assets","url":"docs/bud.assets#usage","content":"Copy an image to your disribution directory: bud.config.js bud.assets(['images/image.png']) Copy "},{"title":"Use file globbing​","type":1,"pageTitle":"bud.assets","url":"docs/bud.assets#use-file-globbing","content":"Copy all files an images directory to your distribution directory: bud.config.js bud.assets(['images/**/*']) Copy Copy only gifs and jpgs found in src: bud.config.js bud.assets(['src/**/*.{jpg,gif}']) Copy "},{"title":"Additional information​","type":1,"pageTitle":"bud.assets","url":"docs/bud.assets#additional-information","content":"You don't need to import assets which are utilized by your bundled code. For instance, if you are referencing a font file from your stylesheet, the font will already be included in your distribution. You don't need to manually require it with bud.assets, although there is probably no real harm in doing so. bud.assets is specifically for compiling files which are not already included elsewhere. "},{"title":"Introduction","type":0,"sectionRef":"#","url":"docs/","content":"","keywords":""},{"title":"bud.alias​","type":1,"pageTitle":"Introduction","url":"docs/#budalias","content":"Register shorthand for resolving modules Read documentation "},{"title":"bud.assets​","type":1,"pageTitle":"Introduction","url":"docs/#budassets","content":"Include static assets in your compilation even if they aren't referenced in scripts or stylesheets Read documentation "},{"title":"bud.define​","type":1,"pageTitle":"Introduction","url":"docs/#buddefine","content":"Replace variables in your application code and templates at compile time Read documentation "},{"title":"bud.devtool​","type":1,"pageTitle":"Introduction","url":"docs/#buddevtool","content":"Configure sourcemaps Read documentation "},{"title":"bud.entry​","type":1,"pageTitle":"Introduction","url":"docs/#budentry","content":"Specify a set of assets to include in the compilation Read documentation "},{"title":"bud.env​","type":1,"pageTitle":"Introduction","url":"docs/#budenv","content":"bud includes support for utilizing dotenv values (in your config, templates and the browser) Read documentation "},{"title":"bud.externals​","type":1,"pageTitle":"Introduction","url":"docs/#budexternals","content":"Specify a non-standard resolution strategy for modules with a matching name Read documentation "},{"title":"bud.get​","type":1,"pageTitle":"Introduction","url":"docs/#budget","content":"Multi-compiler management utility allowing reference of child compilers Read documentation "},{"title":"bud.hash​","type":1,"pageTitle":"Introduction","url":"docs/#budhash","content":"Enable or disable filename hashing of built assets Read documentation "},{"title":"bud.hooks​","type":1,"pageTitle":"Introduction","url":"docs/#budhooks","content":"Modify internal values with callbacks Read documentation "},{"title":"bud.make​","type":1,"pageTitle":"Introduction","url":"docs/#budmake","content":"Create a new, configurable instance of Bud Read documentation "},{"title":"bud.minimize​","type":1,"pageTitle":"Introduction","url":"docs/#budminimize","content":"Enable or disable minification of static assets Read documentation "},{"title":"bud.mode​","type":1,"pageTitle":"Introduction","url":"docs/#budmode","content":"Specify if a build is being run in a production or development context Read documentation "},{"title":"bud.path​","type":1,"pageTitle":"Introduction","url":"docs/#budpath","content":"Get an absolute path for a given Framework location Read documentation "},{"title":"bud.provide​","type":1,"pageTitle":"Introduction","url":"docs/#budprovide","content":"Make a variable/module available throughout the entire application Read documentation "},{"title":"bud.proxy​","type":1,"pageTitle":"Introduction","url":"docs/#budproxy","content":"Proxy an existing development server Read documentation "},{"title":"bud.publicPath​","type":1,"pageTitle":"Introduction","url":"docs/#budpublicpath","content":"Get the application public path Read documentation "},{"title":"bud.runtime​","type":1,"pageTitle":"Introduction","url":"docs/#budruntime","content":"Generate a runtime chunk intended to be inlined on the page Read documentation "},{"title":"bud.serve​","type":1,"pageTitle":"Introduction","url":"docs/#budserve","content":"Configure the development server Read documentation "},{"title":"bud.setPath​","type":1,"pageTitle":"Introduction","url":"docs/#budsetpath","content":"Set application filesystem paths Read documentation "},{"title":"bud.setPublicPath​","type":1,"pageTitle":"Introduction","url":"docs/#budsetpublicpath","content":"Set application filesystem paths Read documentation "},{"title":"bud.splitChunks​","type":1,"pageTitle":"Introduction","url":"docs/#budsplitchunks","content":"Separate vendor code from application code Read documentation "},{"title":"bud.tap​","type":1,"pageTitle":"Introduction","url":"docs/#budtap","content":"Access the bud object through a callback. Useful to maintain a function chain Read documentation "},{"title":"bud.template​","type":1,"pageTitle":"Introduction","url":"docs/#budtemplate","content":"Configure your application's html templates Read documentation "},{"title":"bud.use​","type":1,"pageTitle":"Introduction","url":"docs/#buduse","content":"Register an extension or set of extensions Read documentation "},{"title":"bud.when​","type":1,"pageTitle":"Introduction","url":"docs/#budwhen","content":"Conditionally execute a tap function Read documentation "},{"title":"bud.alias","type":0,"sectionRef":"#","url":"docs/bud.alias","content":"","keywords":""},{"title":"Usage​","type":1,"pageTitle":"bud.alias","url":"docs/bud.alias#usage","content":"As an example, imagine a file located at scripts/my-feature/components/example/index.js that is importing a function from scripts/util.js. This import statement is very lengthy and fragile. scripts/my-feature/components/example/index.js import {merge} from '../../../util' Copy So, we may wish to define an alias to reference the root of scripts. bud.config.js bud.alias({ '@scripts': bud.path('src', 'scripts'), }) Copy And use bud.alias to import the script relative to the alias. scripts/my-feature/components/example/index.js import {merge} from '@scripts/util' Copy This can prove especially useful later, should we have cause to move scripts/my-feature/components/example/index.js. Without the alias we would need to rework the relative path between the two files. But, since the alias is independent of the path of the importing file, we don't have to deal with that. "},{"title":"Signature​","type":1,"pageTitle":"bud.alias","url":"docs/bud.alias#signature","content":"bud.alias.d.ts type Alias = ( this: Framework alias: Webpack.Configuration['resolve']['alias'] ) =&gt; Framework Copy "},{"title":"bud.define","type":0,"sectionRef":"#","url":"docs/bud.define","content":"","keywords":""},{"title":"Usage​","type":1,"pageTitle":"bud.define","url":"docs/bud.define#usage","content":"Call bud.define and pass your definitions. bud.config.js bud.define({ APP_NAME: 'My Application', }) Copy Any instances of APP_NAME in your application code will be replaced with My Application. src/app.js console.log(APP_NAME) Copy Replacements will also be made when compiling html templates. public/index.html &lt;html&gt; &lt;title&gt;%APP_NAME%&lt;/title&gt; &lt;!-- ... --&gt; &lt;/html&gt; Copy "},{"title":"Signature​","type":1,"pageTitle":"bud.define","url":"docs/bud.define#signature","content":"@roots/bud-api/types/repository/index.d.ts interface Define { ( this: Framework, values: Webpack.DefinePlugin['definitions'], ): Framework } Copy "},{"title":"bud.devtool","type":0,"sectionRef":"#","url":"docs/bud.devtool","content":"","keywords":""},{"title":"Usage​","type":1,"pageTitle":"bud.devtool","url":"docs/bud.devtool#usage","content":"Enable sourcemaps bud.config.js bud.devtool() Copy Disable sourcemaps bud.config.js bud.devtool(false) Copy Override the default configuration bud.config.js bud.devtool('inline-cheap-module-source-map') Copy Enable sourcemaps only in development (see bud.when for extra clarity) bud.config.js bud.when(bud.isDevelopment, bud =&gt; bud.devtool()) Copy "},{"title":"Signature​","type":1,"pageTitle":"bud.devtool","url":"docs/bud.devtool#signature","content":"@roots/bud-api/types/repository/index.d.ts namespace Repository { interface Devtool { ( this: Framework, devtool?: Webpack.Configuration['devtool'], ): Framework } } Copy "},{"title":"bud.env","type":0,"sectionRef":"#","url":"docs/bud.env","content":"","keywords":""},{"title":"Accessing env values from the config file​","type":1,"pageTitle":"bud.env","url":"docs/bud.env#accessing-env-values-from-the-config-file","content":"Values defined in the application .env file are available via bud.env. The bud.env object is a container instance. Most commonly you'll probably find yourself using these methods: bud.config.js bud.env.get('APP_NAME') Copy bud.config.js bud.env.is('APP_ENV', 'production') Copy "},{"title":"Accessing env values from within a template​","type":1,"pageTitle":"bud.env","url":"docs/bud.env#accessing-env-values-from-within-a-template","content":"Values defined in the application .env file are available within HTML templates (see bud.template for more information on HTML templating). "},{"title":"Accessing env values from within the application​","type":1,"pageTitle":"bud.env","url":"docs/bud.env#accessing-env-values-from-within-the-application","content":"Values defined in the application .env file are made available to bundled modules via the window global provided that they include PUBLIC_ in the key. This is to prevent accidental sharing of sensitive data. bud.config.js const {PUBLIC_APP_NAME} = window Copy "},{"title":"bud.externals","type":0,"sectionRef":"#","url":"docs/bud.externals","content":"","keywords":""},{"title":"Usage​","type":1,"pageTitle":"bud.externals","url":"docs/bud.externals#usage","content":"bud.config.js bud.externals({ jQuery: 'window.jquery', }) Copy "},{"title":"bud.get","type":0,"sectionRef":"#","url":"docs/bud.get","content":"","keywords":""},{"title":"Usage​","type":1,"pageTitle":"bud.get","url":"docs/bud.get#usage","content":"Get a compiler: bud.config.js module.exports = bud =&gt; bud.get('compiler-name') Copy Once you have a compiler instance you can continue chaining off it. bud.config.js module.exports = bud =&gt; bud.get('compiler-name').entry({ main: ['index.js'], }) Copy The parent compiler is accessible using global or parent. bud.config.js module.exports = bud =&gt; bud /** * Configuring child compiler */ .get('child-compiler') .entry({ child: ['index.js'], }) /** * Configuring parent compiler */ .get('global') .entry({ 'parent-main': ['parent.js'], }) Copy "},{"title":"Related​","type":1,"pageTitle":"bud.get","url":"docs/bud.get#related","content":"Utility\tDescriptionbud.make\tCreate a child compiler "},{"title":"bud.hash","type":0,"sectionRef":"#","url":"docs/bud.hash","content":"","keywords":""},{"title":"Usage​","type":1,"pageTitle":"bud.hash","url":"docs/bud.hash#usage","content":"Enable hashing: bud.hash() Copy You may also explicitly pass a boolean true: bud.hash(true) Copy Disable hashing: bud.hash(false) Copy "},{"title":"Customizing the hash format​","type":1,"pageTitle":"bud.hash","url":"docs/bud.hash#customizing-the-hash-format","content":"bud.store.set('hashFormat', '[name].[contenthash:6]') Copy "},{"title":"bud.minimize","type":0,"sectionRef":"#","url":"docs/bud.minimize","content":"","keywords":""},{"title":"Usage​","type":1,"pageTitle":"bud.minimize","url":"docs/bud.minimize#usage","content":"Enable minification bud.minimize() Copy Disable minification bud.minimize(false) Copy "},{"title":"bud.hooks","type":0,"sectionRef":"#","url":"docs/bud.hooks/","content":"","keywords":""},{"title":"bud.hooks.on​","type":1,"pageTitle":"bud.hooks","url":"docs/bud.hooks/#budhookson","content":"Hooks are defined as functions. Hook functions are registered with bud.hooks.on bud.config.js bud.hooks.on('build/externals', externals =&gt; ({ ...externals, $: 'jquery', }) Copy bud.hooks.on takes two parameters: The name of the hook.A function to filter the associated value through. "},{"title":"bud.hooks.filter​","type":1,"pageTitle":"bud.hooks","url":"docs/bud.hooks/#budhooksfilter","content":"Filters are registered with bud.hooks.filter. bud.hooks.filter takes two parameters: The name of the filter to hook onto.The value which is being filtered "},{"title":"Usage​","type":1,"pageTitle":"bud.hooks","url":"docs/bud.hooks/#usage","content":"A value is passed through the my.filter.key filter. const filteredValue = bud.hooks.filter('my.filter.key', value) Copy Now, the user and other extensions have access to this value and can modify it. bud.hooks.on('my.filter.key', value =&gt; value.shift()) Copy "},{"title":"Hooks reference","type":0,"sectionRef":"#","url":"docs/bud.hooks/reference","content":"Hooks reference note Docs are a work-in-progress. Below is a work-in-progress index of all hooks registered by @roots/bud core packages. Most build related hooks can be found in @roots/bud-build. Most extensions related hooks can be found in @roots/bud. key\tnotesbuild\tbuilds webpack config before\tcalled directly before build after\tcalled directly after build. locations/project\tproject path (absolute) locations/src\tsource path (relative to locations/project) locations/dist\tdist path (relative to locations/project) locations/publicPath\tpublic path (default: /) locations/modules\tnode_modules path (relative to locations/project) locations/storage\tstorage dir for artifacts/cache (relative to locations/project) build/bail\twebpack.bail build/cache\twebpack.cache build/context\twebpack.context build/devtool\twebpack.devtool build/entry\twebpack.entry build/experiments\twebpack.experiments build/externals\twebpack.externals build/infrastructureLogging\twebpack.infrastructureLogging build/mode\twebpack.mode build/name\twebpack.name build/node\twebpack.node build/output\twebpack.output build/output/path\twebpack.output.path build/output/pathinfo\twebpack.output.pathinfo build/output/publicPath\twebpack.output.publicPath build/output/filename\twebpack.output.filename build/optimization\twebpack.optimization build/optimization/emitOnErrors\twebpack.optimization.emitOnErrors build/optimization/minimize\twebpack.optimization.minimize build/optimization/minimizer\twebpack.optimization.minimizer build/optimization/moduleIds\twebpack.optimization.moduleIds build/optimization/runtimeChunk\twebpack.optimization.runtimeChunk build/optimization/splitChunks\twebpack.optimization.splitChunks build/parallelism\twebpack.parallelism build/performance\twebpack.performance build/plugins\twebpack.plugins build/profile\twebpack.profile build/recordsPath\twebpack.recordsPath build/resolve\twebpack.resolve build/resolve/alias\twebpack.resolve.alias build/resolve/extensions\twebpack.resolve.extensions build/resolve/modules\twebpack.resolve.modules build/stats\twebpack.stats build/target\twebpack.target build/watch\twebpack.watch build/watchOptions\twebpack.watchOptions","keywords":""},{"title":"bud.make","type":0,"sectionRef":"#","url":"docs/bud.make","content":"","keywords":""},{"title":"Usage​","type":1,"pageTitle":"bud.make","url":"docs/bud.make#usage","content":"bud.make is an asyncronous function that takes two parameters: The name of the new compilerAn optional callback to use for configuring the compiler. await bud.make('scripts', async child =&gt; child.entry('app', 'app.js'), ) Copy It returns a Promise which resolves to the root instance for further chaining. Related: bud.get Guides: multi-compiler guide "},{"title":"bud.mode","type":0,"sectionRef":"#","url":"docs/bud.mode/","content":"","keywords":""},{"title":"Additional information​","type":1,"pageTitle":"bud.mode","url":"docs/bud.mode/#additional-information","content":"bud.mode correlates with NODE_ENV and BABEL_ENV. "},{"title":"bud.entry","type":0,"sectionRef":"#","url":"docs/bud.entry","content":"","keywords":""},{"title":"Usage​","type":1,"pageTitle":"bud.entry","url":"docs/bud.entry#usage","content":"The simplest usage is just a name for the entrypoint and the asset to compile bud.config.js bud.entry('app', 'app.js') Copy It is also possible to pass an array of assets. Assets do not have to be the same filetype to be grouped together as a single entrypoint. bud.config.js bud.entry('app', ['app.js', 'app.css']) Copy You may specify multiple entrypoints in one call using object syntax bud.config.js bud.entry({ app: ['app.js', 'app.css'], admin: ['admin.js', 'admin.css'], }) Copy "},{"title":"Specifying dependencies​","type":1,"pageTitle":"bud.entry","url":"docs/bud.entry#specifying-dependencies","content":"Bud supports the new Webpack 5 dependOn syntax for explicitly defining entrypoint dependencies. Example react application: bud.config.js bud.entry({ react: ['react', 'react-dom'], app: { import: ['app.js', 'app.css'], dependOn: ['react'], }, }) Copy "},{"title":"Globbing​","type":1,"pageTitle":"bud.entry","url":"docs/bud.entry#globbing","content":"You can specify assets using fast-glob syntax. * matches any number of characters, but not /? matches a single character, but not /** matches any number of characters, including /, as long as it's the only thing in a path part{} allows for a comma-separated list of &quot;or&quot; expressions! at the beginning of a pattern will negate the match "},{"title":"Specifying entrypoints with hooks​","type":1,"pageTitle":"bud.entry","url":"docs/bud.entry#specifying-entrypoints-with-hooks","content":"You may also specify entrypoints using the build/entry hook. bud.config.js bud.hooks.on('build/entry', { app: ['app.js', 'app.css'], admin: ['admin.js', 'admin.css'], }) Copy This will completely override whatever is defined. If you want to augment the existing definition you can do so with spread syntax. bud.config.js bud.hooks.on('build/entry', entrypoints =&gt; ({ ...entrypoints, app: ['app.js', 'app.css'], admin: ['admin.js', 'admin.css'], }) Copy "},{"title":"Signature​","type":1,"pageTitle":"bud.entry","url":"docs/bud.entry#signature","content":"@roots/bud-api/types/repository/index.d.ts namespace Repository { interface Entry { ( this: Framework, name: string, entrypoint: Entry.Value, ): Framework } interface Entry { (this: Framework, entrypoints: Entry.Input): Framework } namespace Entry { interface Object { import?: string[] dependsOn?: string[] } interface Input { [k: string]: | Object | Object['import'] | GlobTask['pattern'] } type Value = GlobTask['pattern'] | Array&lt;GlobTask['pattern']&gt; } } Copy "},{"title":"bud.isDevelopment","type":0,"sectionRef":"#","url":"docs/bud.mode/bud.isDevelopment","content":"","keywords":""},{"title":"Usage​","type":1,"pageTitle":"bud.isDevelopment","url":"docs/bud.mode/bud.isDevelopment#usage","content":"Very useful in conditionals: bud.config.js module.exports = bud =&gt; bud.isDevelopment &amp;&amp; bud.devtool('source-map') Copy Pairs well with bud.when: bud.config.js module.exports = bud =&gt; bud.when(bud.isDevelopment, bud =&gt; bud.devtool()) Copy "},{"title":"See also​","type":1,"pageTitle":"bud.isDevelopment","url":"docs/bud.mode/bud.isDevelopment#see-also","content":"bud.modebud.isProduction "},{"title":"bud.path","type":0,"sectionRef":"#","url":"docs/bud.path","content":"","keywords":""},{"title":"Usage​","type":1,"pageTitle":"bud.path","url":"docs/bud.path#usage","content":"Returns the absolute path to the src directory. bud.path('src') Copy Returns the absolute path to 'scripts/app.js' (from project root). bud.path('project', 'scripts/app.js') Copy "},{"title":"bud.proxy","type":0,"sectionRef":"#","url":"docs/bud.proxy","content":"","keywords":""},{"title":"Usage​","type":1,"pageTitle":"bud.proxy","url":"docs/bud.proxy#usage","content":"bud.proxy, with nothing passed, will proxy localhost:8080. bud.config.ts bud.proxy() Copy Optionally, you may also use bud.proxy to further configure the middleware options to meet your project requirements. bud.config.ts bud.proxy({target: 'localhost:8080'}) Copy These options are passed through to http-proxy-middleware. "},{"title":"bud.publicPath","type":0,"sectionRef":"#","url":"docs/bud.publicPath","content":"","keywords":""},{"title":"Usage​","type":1,"pageTitle":"bud.publicPath","url":"docs/bud.publicPath#usage","content":"Get the public path: bud.publicPath() Copy "},{"title":"Hooks​","type":1,"pageTitle":"bud.publicPath","url":"docs/bud.publicPath#hooks","content":"You may also modify/retrieve this value using the build/output/publicPath hook: bud.hooks.on('build/output/publicPath', '/dist/') Copy You can modify an existant value using a function: bud.hooks.on('build/output/publicPath', path =&gt; { return path.replace('/segment/', '/new-segment/') }) Copy "},{"title":"bud.isProduction","type":0,"sectionRef":"#","url":"docs/bud.mode/bud.isProduction","content":"","keywords":""},{"title":"Usage​","type":1,"pageTitle":"bud.isProduction","url":"docs/bud.mode/bud.isProduction#usage","content":"Very useful in conditionals: bud.config.js module.exports = bud =&gt; bud.isProduction &amp;&amp; bud.devtool('source-map') Copy Pairs well with bud.when: bud.config.js bud.when(bud.isProduction, bud =&gt; bud.minify()) Copy "},{"title":"See also​","type":1,"pageTitle":"bud.isProduction","url":"docs/bud.mode/bud.isProduction#see-also","content":"bud.modebud.isDevelopment "},{"title":"bud.provide","type":0,"sectionRef":"#","url":"docs/bud.provide","content":"","keywords":""},{"title":"Usage​","type":1,"pageTitle":"bud.provide","url":"docs/bud.provide#usage","content":"The following specifies that $ is the default jQuery export: bud.provide({ jquery: '$', }) Copy Now, in any module in our application, we can invoke jQuery with $. There is no need to import it. $('#modal') // it just works Copy "},{"title":"bud.splitChunks","type":0,"sectionRef":"#","url":"docs/bud.splitChunks","content":"","keywords":""},{"title":"Usage​","type":1,"pageTitle":"bud.splitChunks","url":"docs/bud.splitChunks#usage","content":"bud.config.js bud.splitChunks() Copy "},{"title":"Options​","type":1,"pageTitle":"bud.splitChunks","url":"docs/bud.splitChunks#options","content":"bud.splitChunks takes any parameter Webpack does. "},{"title":"bud.setPath","type":0,"sectionRef":"#","url":"docs/bud.setPath","content":"","keywords":""},{"title":"Params​","type":1,"pageTitle":"bud.setPath","url":"docs/bud.setPath#params","content":"The first is a location registered with the framework: projectsrcdiststorage It is possible for extensions to register additional locations. The second is the path being assigned to this location. If project is being defined this path should be absolute. All other paths should be supplied as relative to project. Alternatively, this function may also accept a key-value object, so that multiple locations can be defined at once. "},{"title":"Usage​","type":1,"pageTitle":"bud.setPath","url":"docs/bud.setPath#usage","content":"Define the src directory as scripts (relative to project root). bud.setPath('src', 'scripts') Copy Define both the src and dist directories in one call: bud.setPath({ src: 'scripts', dist: 'public', }) Copy "},{"title":"bud.setPublicPath","type":0,"sectionRef":"#","url":"docs/bud.setPublicPath","content":"","keywords":""},{"title":"Usage​","type":1,"pageTitle":"bud.setPublicPath","url":"docs/bud.setPublicPath#usage","content":"Set the public path using a string: bud.setPublicPath('/app/themes/sage/dist') Copy Set the public path using a function: bud.setPublicPath(publicPath =&gt; { return `https://cdn.com/${publicPath}` }) Copy "},{"title":"bud.runtime","type":0,"sectionRef":"#","url":"docs/bud.runtime","content":"","keywords":""},{"title":"Usage​","type":1,"pageTitle":"bud.runtime","url":"docs/bud.runtime#usage","content":"bud.runtime() Copy By default bud generates a runtime per chunk. You may want to generate a single runtime for your application. You can override the runtimeChunk setting using this function, in that case. bud.runtime('single') Copy The function will accept anything that webpack would. "},{"title":"bud.serve","type":0,"sectionRef":"#","url":"docs/bud.serve","content":"","keywords":""},{"title":"Server information​","type":1,"pageTitle":"bud.serve","url":"docs/bud.serve#server-information","content":"By default the server is available at this address: Property\tValuehost\tlocalhost port\t3000 "},{"title":"Usage​","type":1,"pageTitle":"bud.serve","url":"docs/bud.serve#usage","content":"There is no need to call this function in order to use the development server. Development server functionality is automatically enabled when the bud serve cli command is invoked. This function is used to configure the development server to run at a different address or port, or to disable certain middleware functions. "},{"title":"Specifying host and port​","type":1,"pageTitle":"bud.serve","url":"docs/bud.serve#specifying-host-and-port","content":"warning You will need to handle resolving custom domains yourself if you don't want to use localhost. bud.config.js bud.serve({ host: 'my-local-site.example', port: 5000, }) Copy "},{"title":"Middleware​","type":1,"pageTitle":"bud.serve","url":"docs/bud.serve#middleware","content":"You may enable or disable middleware using the middleware key. Example disabling all server middleware: bud.config.js bud.serve({ middleware: { dev: false, hot: false, proxy: false, }, }) Copy "},{"title":"bud.tap","type":0,"sectionRef":"#","url":"docs/bud.tap","content":"","keywords":""},{"title":"Usage​","type":1,"pageTitle":"bud.tap","url":"docs/bud.tap#usage","content":"bud.tap(({entry}) =&gt; entry('app', ['app.js'])) Copy Using a regular function (as opposed to an arrow function), you may use bud using a contextual binding: bud.tap(function () { this.entry('app', ['app.js']) }) Copy If you wish to use a non-arrow function while preserving its context, a second parameter will ensure your existing lexical scope is respected. You may still access bud via parameter. bud.tap(function (bud) { bud.entry('app', ['app.js']) }, false) Copy "},{"title":"Bud extensions","type":0,"sectionRef":"#","url":"extensions/","content":"","keywords":""},{"title":"Babel​","type":1,"pageTitle":"Bud extensions","url":"extensions/#babel","content":"Babel support can be added by installing the @roots/bud-babel extension. "},{"title":"TypeScript​","type":1,"pageTitle":"Bud extensions","url":"extensions/#typescript","content":"TypeScript support can be added by installing the @roots/bud-typescript extension. "},{"title":"bud.when","type":0,"sectionRef":"#","url":"docs/bud.when","content":"","keywords":""},{"title":"Usage​","type":1,"pageTitle":"bud.when","url":"docs/bud.when#usage","content":"Only produce a vendor bundle when running in production mode: bud.when(bud.isProduction, () =&gt; bud.vendor()) Copy Use eval sourcemap in development mode and hidden-source-map in production: bud.when( bud.isDevelopment, () =&gt; bud.devtool('eval'), () =&gt; bud.devtool('hidden-source-map'), ) Copy For clarity, here is a very verbose version of the same thing: const test = bud.isDevelopment const inProduction = () =&gt; bud.devtool('eval') const inDevelopment = () =&gt; bud.devtool('hidden-source-map') bud.when(test, inProduction, inDevelopment) Copy "},{"title":"bud.template","type":0,"sectionRef":"#","url":"docs/bud.template","content":"","keywords":""},{"title":"Signature​","type":1,"pageTitle":"bud.template","url":"docs/bud.template#signature","content":"template.d.ts type Template = ( this: Framework, options?: { enabled?: boolean template?: string replace?: { [key: string]: string } }, ) =&gt; Framework Copy "},{"title":"Usage​","type":1,"pageTitle":"bud.template","url":"docs/bud.template#usage","content":"This method can be called without passing any options. bud.config.js bud.template() Copy "},{"title":"Explicitly enabling or disabling​","type":1,"pageTitle":"bud.template","url":"docs/bud.template#explicitly-enabling-or-disabling","content":"You may use enabled to explicitly disable or enable the html generation. bud.config.js bud.template({enabled: false}) Copy Useful in the event that an overeager extension is adding a template you do not have use for. "},{"title":"Using a custom template​","type":1,"pageTitle":"bud.template","url":"docs/bud.template#using-a-custom-template","content":"bud.config.js bud.template({ template: 'index.html', }) Copy "},{"title":"Defining template vars​","type":1,"pageTitle":"bud.template","url":"docs/bud.template#defining-template-vars","content":"Add template variables using replace. bud.config.js bud.template({ replace: { APP_NAME: name, APP_DESCRIPTION: description, PUBLIC_URL: '/app/theme', }, }) Copy You may use any of these variables in the template by surrounding the variable name with % characters. public/index.html &lt;html&gt; &lt;title&gt;%APP_NAME%&lt;/title&gt; &lt;/html&gt; Copy You may use bud.define should you need to access defined variables from your application code as well. Lastly, any variables defined in an .env file are also made available to the template automatically. "},{"title":"Default template reference​","type":1,"pageTitle":"bud.template","url":"docs/bud.template#default-template-reference","content":"&lt;!DOCTYPE html&gt; &lt;html lang=&quot;en&quot;&gt; &lt;head&gt; &lt;meta charset=&quot;utf-8&quot; /&gt; &lt;link rel=&quot;icon&quot; href=&quot;%PUBLIC_URL%/favicon.ico&quot; /&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot; /&gt; &lt;title&gt;%APP_NAME%&lt;/title&gt; &lt;meta name=&quot;theme-color&quot; content=&quot;#000000&quot; /&gt; &lt;meta name=&quot;description&quot; content=&quot;%APP_DESCRIPTION%&quot; /&gt; &lt;link rel=&quot;manifest&quot; href=&quot;%PUBLIC_URL%/manifest.json&quot; /&gt; &lt;/head&gt; &lt;body&gt; &lt;div id=&quot;root&quot;&gt;&lt;/div&gt; &lt;!-- This HTML file is a template. You can add webfonts, meta tags, or analytics to this file. --&gt; &lt;/body&gt; &lt;/html&gt; Copy "},{"title":"bud.use","type":0,"sectionRef":"#","url":"docs/bud.use","content":"","keywords":""},{"title":"Usage​","type":1,"pageTitle":"bud.use","url":"docs/bud.use#usage","content":"Add packaged bud extensions: await bud.use([ require('@roots/bud-babel'), require('@roots/bud-react'), ]) Copy Add an extension inline (also works with an array of extensions): await bud.use({ name: 'my-webpack-plugin', make: () =&gt; new MyWebpackPlugin(), }) Copy Add a webpack plugin inline (also work with an array of plugins): await bud.use(new MyWebpackPlugin()) Copy "},{"title":"Signature​","type":1,"pageTitle":"bud.use","url":"docs/bud.use#signature","content":"@roots/bud-api/types/repository/index.d.ts namespace Repository { interface Use { (this: Framework, source: Use.Input): Promise&lt;Framework&gt; } namespace Use { type Input = Module | Module[] } } Copy "},{"title":"@roots/bud-emotion","type":0,"sectionRef":"#","url":"extensions/bud-emotion","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"@roots/bud-emotion","url":"extensions/bud-emotion#installation","content":"yarnnpm yarn add @roots/bud-emotion --dev Copy "},{"title":"Installing peer dependencies​","type":1,"pageTitle":"@roots/bud-emotion","url":"extensions/bud-emotion#installing-peer-dependencies","content":"After installing the main package, run the bud init command to install required peer dependencies yarnnpm yarn bud init Copy "},{"title":"Usage​","type":1,"pageTitle":"@roots/bud-emotion","url":"extensions/bud-emotion#usage","content":"Add the extension to your config. Make sure it is included after @roots/bud-babel and @roots/bud-react. JavascriptTypeScript bud.config.ts import type {Framework} from '@roots/bud' import * as BudBabelExtension from '@roots/bud-babel' import * as BudReactExtension = from '@roots/bud-react' import * as BudEmotionExtension = from '@roots/bud-emotion' export default (app: Framework) =&gt; app.use([ BudBabelExtension, BudReactExtension, BudEmotionExtension, ]) Copy "},{"title":"@roots/bud-criticalcss","type":0,"sectionRef":"#","url":"extensions/bud-criticalcss","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"@roots/bud-criticalcss","url":"extensions/bud-criticalcss#installation","content":"yarnnpm yarn add @roots/bud-criticalcss --dev Copy "},{"title":"Installing peer dependencies​","type":1,"pageTitle":"@roots/bud-criticalcss","url":"extensions/bud-criticalcss#installing-peer-dependencies","content":"After installing the main package, run the bud init command to install required peer dependencies yarnnpm yarn bud init Copy "},{"title":"@roots/bud-entrypoints","type":0,"sectionRef":"#","url":"extensions/bud-entrypoints","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"@roots/bud-entrypoints","url":"extensions/bud-entrypoints#installation","content":"yarnnpm yarn add @roots/bud-entrypoints --dev Copy "},{"title":"Example output​","type":1,"pageTitle":"@roots/bud-entrypoints","url":"extensions/bud-entrypoints#example-output","content":"Assets are broken down by entrypoint and then filetype. If a runtime is being generated it should always be the first item in the js array. { &quot;app&quot;: { &quot;js&quot;: [ &quot;/app/themes/sage/public/runtime.275c0c.js&quot;, &quot;/app/themes/sage/public/app.c28c5f.js&quot; ], &quot;css&quot;: [&quot;/app/themes/sage/public/app.fefc38.css&quot;] }, &quot;editor&quot;: { &quot;js&quot;: [ &quot;/app/themes/sage/public/runtime.275c0c.js&quot;, &quot;/app/themes/sage/public/editor.b8360e.js&quot; ], &quot;css&quot;: [&quot;/app/themes/sage/public/editor.a67373.css&quot;] }, &quot;customizer&quot;: { &quot;js&quot;: [ &quot;/app/themes/sage/public/runtime.275c0c.js&quot;, &quot;/app/themes/sage/public/customizer.a6ba2e.js&quot; ] } } Copy "},{"title":"@roots/bud-babel","type":0,"sectionRef":"#","url":"extensions/bud-babel","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"@roots/bud-babel","url":"extensions/bud-babel#installation","content":"yarnnpm yarn add @roots/bud-babel --dev Copy "},{"title":"Installing peer dependencies​","type":1,"pageTitle":"@roots/bud-babel","url":"extensions/bud-babel#installing-peer-dependencies","content":"After installing the main package, run the bud init command to install required peer dependencies yarnnpm yarn bud init Copy "},{"title":"Configuration​","type":1,"pageTitle":"@roots/bud-babel","url":"extensions/bud-babel#configuration","content":"@roots/bud-babel comes preconfigured with: @babel/preset-env@babel/plugin-transform-runtime@babel/plugin-proposal-object-rest-spread@babel/plugin-syntax-dynamic-import If this works for you, great! No need to keep reading. But, if you need something more specialized, there is a configuration utility registered by @roots/bud-babel designed to help you out. "},{"title":"Presets​","type":1,"pageTitle":"@roots/bud-babel","url":"extensions/bud-babel#presets","content":"See what presets are registered: bud.config.js console.dir(app.babel.presets) Copy Add preset: bud.config.js app.babel.setPreset('@babel/preset-env') Copy Remove preset: bud.config.js app.babel.unsetPreset('@babel/preset-env') Copy Fully override presets: bud.config.js app.babel.setPresets(['@babel/preset-env']) Copy Override any preset options: bud.config.js app.babel.setPresetOptions('@babel/preset-env', { useBuiltIns: 'entry', }) Copy "},{"title":"Plugins​","type":1,"pageTitle":"@roots/bud-babel","url":"extensions/bud-babel#plugins","content":"Plugins has nearly the exact same API already demonstrated by the presets docs above. See what plugins are registered: bud.config.js console.log(app.babel.plugins) Copy Add a plugin: bud.config.js app.babel.setPlugin('@babel/plugin-transform-runtime') Copy Add a plugin with options: bud.config.js app.babel.setPlugin([ '@babel/plugin-transform-runtime', {helpers: false}, ]) Copy Fully override plugins: bud.config.js app.babel.setPlugins([ '@babel/plugin-transform-runtime', '@babel/plugin-proposal-object-rest-spread', ['@babel/plugin-syntax-dynamic-import', {helpers: false}], ]) Copy Remove a plugin: bud.config.js app.babel.unsetPlugin('@babel/plugin-transform-runtime') Copy Override any plugin options: bud.config.js app.babel.setPluginOptions('@babel/plugin-transform-runtime', { helpers: false, }) Copy "},{"title":"Configuring babel-loader​","type":1,"pageTitle":"@roots/bud-babel","url":"extensions/bud-babel#configuring-babel-loader","content":"Merge options with existing options by passing the options to merge along with the framework instance: bud.config.js app.build.items['babel'].mergeOptions( { cacheDirectory: ({path}) =&gt; path('project', 'tmp'), }, bud, ) Copy Override loader options directly: bud.config.js app.build.items['babel'].setOptions({ cacheDirectory: ({path}) =&gt; path('project', 'tmp'), presets: Object.values(babel.presets), plugins: Object.values(babel.plugins), }) Copy When using setOptions, you must include the plugins and presets (as demonstrated above) if you want bud to continue managing these options. Using setOptions completely overrides the framework's callbacks. If you intend to override those callbacks, you need to pass those options along yourself (or use mergeOptions): bud.config.js app.build.items['babel'].setOptions({ cacheDirectory: ({path}) =&gt; path('project', 'tmp'), presets: ['@babel/preset-env'], plugins: [ '@babel/plugin-transform-runtime', '@babel/plugin-proposal-object-rest-spread', '@babel/plugin-syntax-dynamic-import', ], }) Copy "},{"title":"@roots/bud-imagemin","type":0,"sectionRef":"#","url":"extensions/bud-imagemin","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"@roots/bud-imagemin","url":"extensions/bud-imagemin#installation","content":"yarnnpm yarn add @roots/bud-imagemin --dev Copy "},{"title":"Configuration​","type":1,"pageTitle":"@roots/bud-imagemin","url":"extensions/bud-imagemin#configuration","content":"Without any configuration, the image minimizer extension will compress nearly all image asset types and compress them very well. To compress assets losslessly: bud.imagemin('lossless') Copy To compress assets in a lossy manner: bud.imagemin('lossy') Copy "},{"title":"Custom config​","type":1,"pageTitle":"@roots/bud-imagemin","url":"extensions/bud-imagemin#custom-config","content":"To provide your own configuration options you can pass a callback which will receive and should return the options. bud.imagemin(options =&gt; ({ ...options, // ...override })) Copy "},{"title":"@roots/bud-library","type":0,"sectionRef":"#","url":"extensions/bud-library","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"@roots/bud-library","url":"extensions/bud-library#installation","content":"yarnnpm yarn add @roots/bud-library --dev Copy "},{"title":"Installing peer dependencies​","type":1,"pageTitle":"@roots/bud-library","url":"extensions/bud-library#installing-peer-dependencies","content":"After installing the main package, run the bud init command to install required peer dependencies: yarnnpm yarn bud init Copy "},{"title":"Usage​","type":1,"pageTitle":"@roots/bud-library","url":"extensions/bud-library#usage","content":"Pass bud.library the module you would like to add to the DLL cache: bud.config.js bud.library('jquery') Copy Multiple modules can be added using an array: bud.config.js bud.library(['jquery', 'bootstrap']) Copy "},{"title":"@roots/bud-esbuild","type":0,"sectionRef":"#","url":"extensions/bud-esbuild","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"@roots/bud-esbuild","url":"extensions/bud-esbuild#installation","content":"yarnnpm yarn add @roots/bud-esbuild --dev Copy "},{"title":"Installing peer dependencies​","type":1,"pageTitle":"@roots/bud-esbuild","url":"extensions/bud-esbuild#installing-peer-dependencies","content":"After installing the main package, run the bud init command to install required peer dependencies: yarnnpm yarn bud init Copy "},{"title":"Configuration​","type":1,"pageTitle":"@roots/bud-esbuild","url":"extensions/bud-esbuild#configuration","content":"Set options: bud.esbuild.setOptions({target: 'es2020'}) Copy "},{"title":"@roots/bud-eslint","type":0,"sectionRef":"#","url":"extensions/bud-eslint","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"@roots/bud-eslint","url":"extensions/bud-eslint#installation","content":"yarnnpm yarn add @roots/bud-eslint --dev Copy "},{"title":"Installing peer dependencies​","type":1,"pageTitle":"@roots/bud-eslint","url":"extensions/bud-eslint#installing-peer-dependencies","content":"After installing the main package, run the bud init command to install required peer dependencies: yarnnpm yarn bud init Copy "},{"title":"Configuration​","type":1,"pageTitle":"@roots/bud-eslint","url":"extensions/bud-eslint#configuration","content":"Once everything is installed you can configure eslint via eslint config, as is documented. See the official Eslint user guide. "},{"title":"Configuring the plugin​","type":1,"pageTitle":"@roots/bud-eslint","url":"extensions/bud-eslint#configuring-the-plugin","content":"If you want to configure the eslint plugin options, you may do so with bud.eslint. bud.config.js bud.eslint.config({target: 'es2020'}) Copy Default configuration values: option\tvaluecache\ttrue cacheLocation\tstorage directory context\tsrc directory cwd\tproject directory exclude\tnode_modules extensions\t['js', 'jsx', 'ts', 'tsx', 'vue'] failOnError\ttrue "},{"title":"Configuring eslint using bud.extensions​","type":1,"pageTitle":"@roots/bud-eslint","url":"extensions/bud-eslint#configuring-eslint-using-budextensions","content":"bud.config.js bud.extensions.get('eslint-webpack-plugin').options = { // ... options } Copy "},{"title":"Configuring eslint using bud.api​","type":1,"pageTitle":"@roots/bud-eslint","url":"extensions/bud-eslint#configuring-eslint-using-budapi","content":"bud.config.js bud.hooks.on( 'extension/eslint-webpack-plugin/options', options =&gt; ({ ...options, // overrides }), ) Copy "},{"title":"@roots/bud-react","type":0,"sectionRef":"#","url":"extensions/bud-react","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"@roots/bud-react","url":"extensions/bud-react#installation","content":"yarnnpm yarn add @roots/bud-react --dev Copy "},{"title":"Installing peer dependencies​","type":1,"pageTitle":"@roots/bud-react","url":"extensions/bud-react#installing-peer-dependencies","content":"After installing the main package, run the bud init command to install required peer dependencies: yarnnpm yarn bud init Copy "},{"title":"@roots/bud-sass","type":0,"sectionRef":"#","url":"extensions/bud-sass","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"@roots/bud-sass","url":"extensions/bud-sass#installation","content":"yarnnpm yarn add @roots/bud-sass --dev Copy "},{"title":"Installing peer dependencies​","type":1,"pageTitle":"@roots/bud-sass","url":"extensions/bud-sass#installing-peer-dependencies","content":"After installing the main package, run the bud init command to install required peer dependencies: yarnnpm yarn bud init Copy "},{"title":"@roots/bud-solid","type":0,"sectionRef":"#","url":"extensions/bud-solid","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"@roots/bud-solid","url":"extensions/bud-solid#installation","content":"yarnnpm yarn add @roots/bud-solid --dev Copy "},{"title":"Installing peer dependencies​","type":1,"pageTitle":"@roots/bud-solid","url":"extensions/bud-solid#installing-peer-dependencies","content":"After installing the main package, run the bud init command to install required peer dependencies: yarnnpm yarn bud init Copy "},{"title":"@roots/bud-tailwindcss","type":0,"sectionRef":"#","url":"extensions/bud-tailwindcss","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"@roots/bud-tailwindcss","url":"extensions/bud-tailwindcss#installation","content":"yarnnpm yarn add @roots/bud-tailwindcss --dev Copy "},{"title":"Installing peer dependencies​","type":1,"pageTitle":"@roots/bud-tailwindcss","url":"extensions/bud-tailwindcss#installing-peer-dependencies","content":"After installing the main package, run the bud init command to install required peer dependencies: yarnnpm yarn bud init Copy "},{"title":"@roots/bud-typescript","type":0,"sectionRef":"#","url":"extensions/bud-typescript","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"@roots/bud-typescript","url":"extensions/bud-typescript#installation","content":"yarnnpm yarn add @roots/bud-typescript --dev Copy "},{"title":"Installing peer dependencies​","type":1,"pageTitle":"@roots/bud-typescript","url":"extensions/bud-typescript#installing-peer-dependencies","content":"After installing the main package, run the bud init command to install required peer dependencies: yarnnpm yarn bud init Copy "},{"title":"Enable Typechecking​","type":1,"pageTitle":"@roots/bud-typescript","url":"extensions/bud-typescript#enable-typechecking","content":"info This step is optional but recommended. By default TypeScript files will only be compiled to JS during builds. If you also want typechecking, you can enable it in your bud configuration: bud.typecheck() Copy "},{"title":"Configuration​","type":1,"pageTitle":"@roots/bud-typescript","url":"extensions/bud-typescript#configuration","content":"Beyond that, general ts configuration is handled using a standard tsconfig.json in your project root. See the TypeScript docs on tsconfig.json for more information. Here's a simple starter, should you need it: { &quot;compilerOptions&quot;: { &quot;rootDir&quot;: &quot;ts&quot;, &quot;outDir&quot;: &quot;dist&quot;, &quot;target&quot;: &quot;es2019&quot;, &quot;lib&quot;: [&quot;es2019&quot;, &quot;dom&quot;], &quot;module&quot;: &quot;commonjs&quot;, &quot;esModuleInterop&quot;: true, &quot;strict&quot;: true, &quot;sourceMap&quot;: true } } Copy "},{"title":"@roots/bud-vue","type":0,"sectionRef":"#","url":"extensions/bud-vue","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"@roots/bud-vue","url":"extensions/bud-vue#installation","content":"yarnnpm yarn add @roots/bud-vue --dev Copy "},{"title":"Installing peer dependencies​","type":1,"pageTitle":"@roots/bud-vue","url":"extensions/bud-vue#installing-peer-dependencies","content":"After installing the main package, run the bud init command to install required peer dependencies: yarnnpm yarn bud init Copy "},{"title":"@roots/bud-preset-recommend","type":0,"sectionRef":"#","url":"extensions/presets/bud-preset-recommend","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"@roots/bud-preset-recommend","url":"extensions/presets/bud-preset-recommend#installation","content":"yarnnpm yarn add @roots/bud-preset-recommend --dev Copy "},{"title":"Installing peer dependencies​","type":1,"pageTitle":"@roots/bud-preset-recommend","url":"extensions/presets/bud-preset-recommend#installing-peer-dependencies","content":"After installing the main package, run the bud init command to install required peer dependencies: yarnnpm yarn bud init Copy "},{"title":"bud-postcss","type":0,"sectionRef":"#","url":"extensions/bud-postcss","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"bud-postcss","url":"extensions/bud-postcss#installation","content":"yarnnpm yarn add @roots/bud-postcss --dev Copy "},{"title":"Installing peer dependencies​","type":1,"pageTitle":"bud-postcss","url":"extensions/bud-postcss#installing-peer-dependencies","content":"After installing the main package, run the bud init command to install required peer dependencies yarnnpm yarn bud init Copy "},{"title":"Configuration​","type":1,"pageTitle":"bud-postcss","url":"extensions/bud-postcss#configuration","content":"By default, @roots/bud-postcss supports: postcss-importpostcss-nestedpostcss-preset-env If this works for you, great! No need to keep reading. But, should you need something more specialized, you can configure it in your bud config file or a [postcss.config.js[ file in your project's root directory. info If you have a postcss config file in your project, that configuration will be used instead of the defaults provided by this extension. "},{"title":"Using the bud config builder​","type":1,"pageTitle":"bud-postcss","url":"extensions/bud-postcss#using-the-bud-config-builder","content":"The API used by @roots/bud-postcss internally can also be used in your project config. Let's say you want to use postcss-import to take advantage of the import syntax in your CSS along withpostcss-preset-env. You could use a configuration object with postcss.setPlugins. bud.postcss.setPlugins({ 'postcss-import': require.resolve('postcss-import'), 'postcss-preset-env': [ require.resolve('postcss-preset-env'), {stage: 1}, ], }) Copy Or use a fluent API with postcss.setPlugin. bud.postcss .setPlugin('postcss-import', require.resolve('postcss-import')) .setPlugin('postcss-preset-env', [ require.resolve('postcss-preset-env'), {stage: 1}, ]) Copy In addition to postcss.setPlugin there is a postcss.setPluginOptions method that allows you to set plugin options fluently. bud.postcss .setPlugin('postcss-import', require.resolve('postcss-import')) .setPlugin( 'postcss-preset-env', require.resolve('postcss-preset-env'), ) .setPluginOptions('postcss-preset-env', {stage: 1}) Copy "},{"title":"postcss.setPlugin​","type":1,"pageTitle":"bud-postcss","url":"extensions/bud-postcss#postcsssetplugin","content":"Add a postcss plugin. Takes two parameters. The first is the resolvable plugin module name. The second parameter can either be the path to the postcss plugin module, or a tuple with the path and any associated options. bud.postcss.setPlugin('postcss-preset-env', [ require.resolve('postcss-preset-env'), // the plugin module path {stage: 1}, // options ]) Copy "},{"title":"postcss.setPlugins​","type":1,"pageTitle":"bud-postcss","url":"extensions/bud-postcss#postcsssetplugins","content":"Add multiple postcss plugins. Takes a single parameter, which is an object using the plugin name as keys and the plugin module path and options as values. The options can be either a single object or an array of objects. bud.postcss.setPlugins({ 'postcss-import': require.resolve('postcss-import'), 'postcss-preset-env': [ require.resolve('postcss-preset-env'), {stage: 1}, ], }) Copy "},{"title":"postcss.unsetPlugin​","type":1,"pageTitle":"bud-postcss","url":"extensions/bud-postcss#postcssunsetplugin","content":"Remove a postcss plugin by name. bud.postcss.unsetPlugin('postcss-import') Copy "},{"title":"postcss.setPluginOptions​","type":1,"pageTitle":"bud-postcss","url":"extensions/bud-postcss#postcsssetpluginoptions","content":"Set the options for a postcss plugin. Takes two parameters. The first is the plugin name, the second is the options object. bud.postcss.setPluginOptions('postcss-import', { path: bud.filter('build/resolve/modules'), }) Copy "},{"title":"Architecture","type":0,"sectionRef":"#","url":"guides/advanced-use/architecture","content":"Architecture note Architecture documentation is a work-in-progress.","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"guides/","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"Introduction","url":"guides/#installation","content":"See installation instructions. "},{"title":"Getting started​","type":1,"pageTitle":"Introduction","url":"guides/#getting-started","content":"If you don't know a lot about Webpack or don't feel fully comfortable with JavaScript, check out the Getting Started guide. It was written with you in mind specifically. "},{"title":"Working with the CLI​","type":1,"pageTitle":"Introduction","url":"guides/#working-with-the-cli","content":"Check out the bud cli guide for usage instructions. "},{"title":"General usage guides​","type":1,"pageTitle":"Introduction","url":"guides/#general-usage-guides","content":"Configuring with TypeScriptConfiguring with yml or jsonEnvironment specific configurationRunning multiple compilersUsing as a node library "},{"title":"Configuration function reference​","type":1,"pageTitle":"Introduction","url":"guides/#configuration-function-reference","content":"Common bud.config.js functions are all detailed in their own docs. It is also a great resource to skim if you're trying to figure out what all bud can do. "},{"title":"Extensions repository​","type":1,"pageTitle":"Introduction","url":"guides/#extensions-repository","content":"In bud most features are opt-in and provided via installable extensions. You may be interested in scoping out the list of extensions and their documented uses. "},{"title":"Blog​","type":1,"pageTitle":"Introduction","url":"guides/#blog","content":"Lastly, check out our blog for release announcements and maintainer notes. "},{"title":"@roots/bud-preset-wordpress","type":0,"sectionRef":"#","url":"extensions/presets/bud-preset-wordpress","content":"","keywords":""},{"title":"Installation​","type":1,"pageTitle":"@roots/bud-preset-wordpress","url":"extensions/presets/bud-preset-wordpress#installation","content":"yarnnpm yarn add @roots/bud-preset-wordpress --dev Copy "},{"title":"Installing peer dependencies​","type":1,"pageTitle":"@roots/bud-preset-wordpress","url":"extensions/presets/bud-preset-wordpress#installing-peer-dependencies","content":"After installing the main package, run the bud init command to install required peer dependencies: yarnnpm yarn bud init Copy "},{"title":"Node API","type":0,"sectionRef":"#","url":"guides/advanced-use/node","content":"","keywords":""},{"title":"Using Bud with Node​","type":1,"pageTitle":"Node API","url":"guides/advanced-use/node#using-bud-with-node","content":"The easiest way to get going is calling the factory helper exported from @roots/bud. JavascriptTypeScript config/build.ts import {factory} from '@roots/bud' import type {Framework} from '@roots/bud' const build = async () =&gt; { const app: Framework = await factory() } build() Copy You may wish to override bud services, its base configuration, or programatically set the compiler mode to production or development. These can all be specified with optional factory config properties. You may also wish to import the config and services objects from @roots/bud to merge your overrides with the defaults. This way, you don't have to reimplement the entire framework. JavascriptTypeScript config/build.ts import {config, factory, services} from '@roots/bud' import type {Framework} from '@roots/bud' const build = async () =&gt; { const app: Framework = await factory({ name: 'bud' mode: 'production' config: { ...config, // config overrides }, services: { ...services, // service overrides } }) } build() Copy The return value of factory is an instance of Bud, just as it is passed to the callback function exported by bud.config.js. "},{"title":"Exporting a webpack config​","type":1,"pageTitle":"Node API","url":"guides/advanced-use/node#exporting-a-webpack-config","content":"Call bud.build.make and return the configuration. For more information see the webpack documentation on configuring webpack with a promise. webpack.config.js const {factory} = require('@roots/bud') module.exports = async () =&gt; { const app = await factory() // configure return await app.build.make() } Copy "},{"title":"The bud command","type":0,"sectionRef":"#","url":"guides/bud-cli/","content":"","keywords":""},{"title":"Quick links​","type":1,"pageTitle":"The bud command","url":"guides/bud-cli/#quick-links","content":"bud build: Compiles assetsbud doctor: Checks for issues with the project configurationbud clean: Remove compiled assets, artifacts and cachesbud install: Installs dependencies "},{"title":"bud build","type":0,"sectionRef":"#","url":"guides/bud-cli/build","content":"bud build $ yarn bud build --help ```sh compile source assets USAGE $ bud build [-h] [--version] [--log] [--log.level v|vv|vvv|vvvv] [--log.papertrail] [--log.min] [--log.secret &lt;value&gt;] [--target &lt;value&gt;] [--location.src &lt;value&gt;] [--location.dist &lt;value&gt;] [--location.project &lt;value&gt;] [--location.publicPath &lt;value&gt;] [--location.storage &lt;value&gt;] [--location.modules &lt;value&gt;] [--cache] [--cache.type filesystem|memory|false] [--clean] [--config &lt;value&gt;] [--dashboard] [--devtool &lt;value&gt;] [--html] [--hash] [--inject] [--manifest] [--minimize] [--splitChunks] [--vendor] [--runtime] FLAGS -h, --help Show CLI help. --[no-]cache cache built modules to the filesystem --cache.type=&lt;option&gt; [default: filesystem] &lt;options: filesystem|memory|false&gt; --[no-]clean clean dist directory before compiling --config=&lt;value&gt; path to config file --[no-]dashboard enable bud dashboard --devtool=&lt;value&gt; specify source-map type --[no-]hash hash compiled filenames --[no-]html generate an html template --[no-]inject automatically register &amp; boot extensions --location.dist=&lt;value&gt; distribution directory --location.modules=&lt;value&gt; public path --location.project=&lt;value&gt; repo root path --location.publicPath=&lt;value&gt; public path --location.src=&lt;value&gt; source directory --location.storage=&lt;value&gt; storage directory --[no-]log log to console --log.level=&lt;option&gt; [default: vvv] set log verbosity. `v` is error level. `vv` is warning level. `vvv` is log level. `vvvv` is debug level. &lt;options: v|vv|vvv|vvvv&gt; --[no-]log.min remove formatting from logged objects --[no-]log.papertrail preserve logger output --log.secret=&lt;value&gt;... [default: /Users/kellymears/code/roots/dev/bud/ examples/babel] hide matching strings from logging output --[no-]manifest emit manifest.json --[no-]minimize minimize file size of compiled assets --[no-]runtime Create a runtime chunk --[no-]splitChunks create separate chunks for vendor and app code --target=&lt;value&gt;... [default: ] limit compilation to this compiler --[no-]vendor create separate chunks for vendor and app code; alias for splitChunks --version Show CLI version. DESCRIPTION compile source assets EXAMPLES $ bud build $ bud build --cache ``` Copy","keywords":""},{"title":"bud install","type":0,"sectionRef":"#","url":"guides/bud-cli/install","content":"bud install $ yarn bud install --help ```sh install peer dependencies USAGE $ bud install [-h] [--version] [--log.level v|vv|vvv|vvvv] [--log.min] [--log.secret &lt;value&gt;] FLAGS -h, --help Show CLI help. --log.level=&lt;option&gt; [default: vvv] set log verbosity. `v` is error level. `vv` is warning level. `vvv` is log level. `vvvv` is debug level. &lt;options: v|vv|vvv|vvvv&gt; --[no-]log.min remove formatting from logged objects --log.secret=&lt;value&gt;... [default: /Users/kellymears/code/roots/dev/bud/examples/babel] hide matching strings from logging output --version Show CLI version. DESCRIPTION install peer dependencies ALIASES $ bud init EXAMPLES $ bud install ``` Copy","keywords":""},{"title":"bud doctor","type":0,"sectionRef":"#","url":"guides/bud-cli/doctor","content":"bud doctor $ yarn bud doctor --help ```sh diagnose issues USAGE $ bud doctor [-h] [--version] [--log.level v|vv|vvv|vvvv] [--log.min] [--log.secret &lt;value&gt;] FLAGS -h, --help Show CLI help. --log.level=&lt;option&gt; [default: vvv] set log verbosity. `v` is error level. `vv` is warning level. `vvv` is log level. `vvvv` is debug level. &lt;options: v|vv|vvv|vvvv&gt; --[no-]log.min remove formatting from logged objects --log.secret=&lt;value&gt;... [default: /Users/kellymears/code/roots/dev/bud/examples/babel] hide matching strings from logging output --version Show CLI version. DESCRIPTION diagnose issues EXAMPLES $ bud doctor ``` Copy","keywords":""},{"title":"Introduction","type":0,"sectionRef":"#","url":"guides/general-use/","content":"","keywords":""},{"title":"Topics​","type":1,"pageTitle":"Introduction","url":"guides/general-use/#topics","content":"Configuring with TypeScriptConfiguring with yml or jsonEnvironment specific configurationRunning multiple compilers "},{"title":"bud clean","type":0,"sectionRef":"#","url":"guides/bud-cli/clean","content":"bud clean $ yarn bud clean --help ```sh clean project distributables and caches USAGE $ bud clean [-h] [--version] [--log.level v|vv|vvv|vvvv] [--log.min] [--log.secret &lt;value&gt;] FLAGS -h, --help Show CLI help. --log.level=&lt;option&gt; [default: vvv] set log verbosity. `v` is error level. `vv` is warning level. `vvv` is log level. `vvvv` is debug level. &lt;options: v|vv|vvv|vvvv&gt; --[no-]log.min remove formatting from logged objects --log.secret=&lt;value&gt;... [default: /Users/kellymears/code/roots/dev/bud/examples/babel] hide matching strings from logging output --version Show CLI version. DESCRIPTION clean project distributables and caches EXAMPLES $ bud clean ``` Copy","keywords":""},{"title":"Writing an extension","type":0,"sectionRef":"#","url":"guides/advanced-use/writing-an-extension","content":"","keywords":""},{"title":"Extensions.Module​","type":1,"pageTitle":"Writing an extension","url":"guides/advanced-use/writing-an-extension#extensionsmodule","content":""},{"title":"Example (@roots/bud-tailwindcss)​","type":1,"pageTitle":"Writing an extension","url":"guides/advanced-use/writing-an-extension#example-rootsbud-tailwindcss","content":"The @roots/bud-tailwindcss extension: registers a function bud.tailwind that configures @roots/bud-postcss.On boot it calls that function if peer requirements are met. index.tstailwind.service.tstailwind.config.ts index.js // Copyright (c) Roots Foundation, LLC. All rights reserved. // Licensed under the MIT license. /** * Adds tailwindcss support to Bud * * @see https://roots.io/bud * @see https://github.com/roots/bud * * @remarks * - 💁 Composable - Build exceptional web applications using a modular, hackable build system * * - 💪 Modern - Modern framework that scales from a single file to thousands of lines of code * * - 🌱 Easy - Low bundle size and fast build times with little to no configuration * * @packageDocumentation */ import type {tailwind} from './bud.tailwind' import {BudTailwindCssExtension} from './tailwind.extension' declare module '@roots/bud-framework' { interface Framework { tailwind: typeof tailwind } interface Modules { '@roots/bud-tailwindcss': typeof BudTailwindCssExtension } } export const {name, api, boot} = BudTailwindCssExtension Copy "},{"title":"Extensions.WebpackPlugin​","type":1,"pageTitle":"Writing an extension","url":"guides/advanced-use/writing-an-extension#extensionswebpackplugin","content":"A WebpackPlugin extends the Module type, so it can do everything a Module can. It must fulfill one of two requirements: Use make and return a Webpack.WebpackPluginInstance, or;Use apply (Webpack.WebpackPluginInstance['apply']) directly (the extension is essentially a superset of Webpack.WebpackPluginInstance). In general, you would include make if you are wrapping a webpack plugin and apply if you are writing a Webpack.WebpackPlugin specific to your extension. None of the first-party extensions use apply even though some of them have an accompanying Webpack.WebpackPlugin. Instead, the plugin is packaged separately from the extension (in case someone wants to use the plugin directly). This is the recommended approach.  Copy "},{"title":"Static configuration","type":0,"sectionRef":"#","url":"guides/general-use/config-static","content":"","keywords":""},{"title":"Create a static config file​","type":1,"pageTitle":"Static configuration","url":"guides/general-use/config-static#create-a-static-config-file","content":"Create either a bud.config.json or bud.config.yml in your project root. "},{"title":"Working with a static config​","type":1,"pageTitle":"Static configuration","url":"guides/general-use/config-static#working-with-a-static-config","content":"Generally speaking, config function names can be used as keys. Their values serve as function parameters. ymljson bud.config.yml entry: app: - index.js - index.css Copy Things to think about: You can't do a bunch of stuff in a static config. If you need to specify a callback or anything that isn't a simple primitive as a parameter a static config is not for you. You should use a JavaScript or TypeScript config.Static configurations will likely never have parity with JavaScript or TypeScript configurations. It's just not on the roadmap.yml is about ten times slower to parse than any other config type. "},{"title":"Configuring with TypeScript","type":0,"sectionRef":"#","url":"guides/general-use/config-ts","content":"","keywords":""},{"title":"Create a bud.config.ts file​","type":1,"pageTitle":"Configuring with TypeScript","url":"guides/general-use/config-ts#create-a-budconfigts-file","content":"Create a bud.config.ts file in your project root. If you already have a bud.config.js file, change the extension. caution Bud configuration files are not mutually exclusive. If you have both a bud.config.js file and a bud.config.ts file in your project root, both configurations will be applied to your build. Things will probably still work fine, but any issues that may crop up will likely be hard to debug. You should save yourself possible headaches and pick a flavor. "},{"title":"Annotate your config​","type":1,"pageTitle":"Configuring with TypeScript","url":"guides/general-use/config-ts#annotate-your-config","content":"You can import the Framework type from @roots/bud. bud.config.ts import type {Framework} from '@roots/bud' Copy "},{"title":"Utilize a default export​","type":1,"pageTitle":"Configuring with TypeScript","url":"guides/general-use/config-ts#utilize-a-default-export","content":"Rather than using module.exports syntax, use a default export. bud.config.ts import type {Framework} from '@roots/bud' export default (bud: Framework): Framework =&gt; bud.entry('main', 'index.js').template() Copy That's it! "},{"title":"Environment-specific configuration","type":0,"sectionRef":"#","url":"guides/general-use/config-env","content":"","keywords":""},{"title":"Example​","type":1,"pageTitle":"Environment-specific configuration","url":"guides/general-use/config-env#example","content":"This configuration: Specifies an entrypoint containing app.js.Specifies that in production mode the entrypoint should be hashed and minified.Specifies that in development mode the entrypoint should include source maps. JavascriptTypeScript bud.config.ts import type {Framework} from '@roots/bud' export default function (app: Framework): void { app .entry('app', 'app.js') .when( app.isProduction, () =&gt; app.hash().minimize() () =&gt; app.devtool() ) } Copy Here is the same thing but utilizing environment-specific config files instead of bud.when. JavascriptTypeScript bud.config.ts import type {Framework} from '@roots/bud' export default (app: Framework) =&gt; app.entry('app', 'app.js') Copy bud.config.development.ts import type {Framework} from '@roots/bud' export default (app: Framework) =&gt; app.hash().minify() Copy bud.config.production.ts import type {Framework} from '@roots/bud' export default (app: Framework) =&gt; app.devtool() Copy Worth it? In this case, probably not. But this is a trivial example. Application configuration can be very complex and this bit of extra clarity might go a long way to helping keep your house in order. "},{"title":"Filename hashing","type":0,"sectionRef":"#","url":"guides/general-use/hashing","content":"","keywords":""},{"title":"Example​","type":1,"pageTitle":"Filename hashing","url":"guides/general-use/hashing#example","content":"JavascriptTypeScript import type {Framework} from '@roots/bud' export default (bud: Framework) =&gt; bud.hash() Copy "},{"title":"Customizing the hash format​","type":1,"pageTitle":"Filename hashing","url":"guides/general-use/hashing#customizing-the-hash-format","content":"bud.store.set('hashFormat', '[name].[contenthash:6]') Copy "},{"title":"Getting Started","type":0,"sectionRef":"#","url":"guides/getting-started/","content":"","keywords":""},{"title":"Our project​","type":1,"pageTitle":"Getting Started","url":"guides/getting-started/#our-project","content":"To follow along, recreate the following project in an empty directory: structurepackage.jsonsrc/index.jssrc/index.css $ tree -I node_modules ├── package.json └── src ├── index.js └── index.css Copy "},{"title":"Installing bud​","type":1,"pageTitle":"Getting Started","url":"guides/getting-started/#installing-bud","content":"Add @roots/bud as a development dependency using your choice of pacakge manager. yarnnpm yarn add @roots/bud --dev Copy "},{"title":"Using the CLI​","type":1,"pageTitle":"Getting Started","url":"guides/getting-started/#using-the-cli","content":"The bud command is your primary means of initiating builds and carrying out other tasks. For a better sense of what all is possible, read the guide to using the cli and try invoking bud --help: $ yarn bud --help ```sh Frontend build tools combining the best parts of Symfony Encore and Laravel Mix VERSION @roots/bud/5.0.0 darwin-arm64 node-v16.13.1 USAGE $ bud [COMMAND] COMMANDS build compile source assets clean clean project distributables and caches doctor diagnose issues install install peer dependencies serve compile assets ``` Copy "},{"title":"Copying static assets","type":0,"sectionRef":"#","url":"guides/getting-started/assets","content":"","keywords":""},{"title":"Adding the image to our compilation​","type":1,"pageTitle":"Copying static assets","url":"guides/getting-started/assets#adding-the-image-to-our-compilation","content":"bud.assets takes an array of assets we want copied, which is how we'll specify our image. bud.config.js module.exports = bud =&gt; bud .use(require('@roots/bud-babel')) .entry({ main: ['index.js', 'index.css'], landing: 'landing.js', }) .assets(['images/image.png']) .template() Copy "},{"title":"Copying directories​","type":1,"pageTitle":"Copying static assets","url":"guides/getting-started/assets#copying-directories","content":"If we have more than one image in that directory and we want to copy all of them, we could add each image to this array manually. But it will like be much faster &amp; more maintable to copy the entire directory, which bud.assets supports. bud.config.js module.exports = bud =&gt; bud .use(require('@roots/bud-babel')) .entry({ main: ['index.js', 'index.css'], landing: 'landing.js', }) .assets(['images']) .template() Copy "},{"title":"Copying pattern matches​","type":1,"pageTitle":"Copying static assets","url":"guides/getting-started/assets#copying-pattern-matches","content":"bud.assets also supports glob matching in case we want to copy only assets that match a particular pattern: bud.config.js module.exports = bud =&gt; bud .use(require('@roots/bud-babel')) .entry({ main: ['index.js', 'index.css'], landing: 'landing.js', }) .assets(['images/**/*.{png,gif,jpg}']) .template() Copy Run a build and check dist/main.js. You should find the class declaration has been transpiled away. "},{"title":"Building the project","type":0,"sectionRef":"#","url":"guides/getting-started/building","content":"Building the project We can use the bud build command to run our first build. success Nope, you didn't miss a step. No configuration is needed as long you have something at src/index.js. yarnnpm yarn bud build Copy You should see receipt of what was built in your terminal $ bud build bud - main.js minimized 56 bytes - main.css minimized 51 bytes Compiled in 486ms Copy","keywords":""},{"title":"Running development builds","type":0,"sectionRef":"#","url":"guides/getting-started/developing","content":"","keywords":""},{"title":"Next steps​","type":1,"pageTitle":"Running development builds","url":"guides/getting-started/developing#next-steps","content":"For anything beyond the simplest projects, you'll likely need to provide some configuration, which we'll do in the next step. "},{"title":"Creating a config file","type":0,"sectionRef":"#","url":"guides/getting-started/config","content":"","keywords":""},{"title":"Create bud.config.js​","type":1,"pageTitle":"Creating a config file","url":"guides/getting-started/config#create-budconfigjs","content":"Create a file titled bud.config.js file in the project root. This file exports a single function that will tell bud to generate an html file for our application. JavascriptTypeScript bud.config.js module.exports = async bud =&gt; bud.template() Copy "},{"title":"Rerun the build​","type":1,"pageTitle":"Creating a config file","url":"guides/getting-started/config#rerun-the-build","content":"Re-run the build using bud build. You'll see output indicating index.html has been generated. $ bud build bud - index.html 467 bytes - main.js minimized 56 bytes - main.css minimized 51 bytes Compiled in 604ms Copy "},{"title":"Adding extensions","type":0,"sectionRef":"#","url":"guides/getting-started/extending","content":"","keywords":""},{"title":"Installing an extension​","type":1,"pageTitle":"Adding extensions","url":"guides/getting-started/extending#installing-an-extension","content":"Start by installing @roots/bud-babel. yarnnpm yarn add @roots/bud-babel --dev Copy "},{"title":"Installing extension dependencies​","type":1,"pageTitle":"Adding extensions","url":"guides/getting-started/extending#installing-extension-dependencies","content":"Extensions might not come with batteries included. It's a good idea after installing a new extension to run bud install to install any missing peer dependencies: yarnnpm yarn bud install Copy This guarantees our project meets the requirements of our installed extensions. Protip It's also a good idea to run bud install after upgrading extensions in case requirements have changed. Your scripts will now be transpiled with babel. You can see for yourself by modifying src/index.js so that it contains some fancy stuff: src/index.js class CoolClass { message = 'hello world' function sayHello() { return this.message } } const cool = new CoolClass() console.log(cool.sayHello()) Copy Run a build and check dist/main.js. You should find the class declaration has been transpiled away. "},{"title":"Running multiple compilers","type":0,"sectionRef":"#","url":"guides/general-use/multi-compiler","content":"","keywords":""},{"title":"In practice​","type":1,"pageTitle":"Running multiple compilers","url":"guides/general-use/multi-compiler#in-practice","content":"To specify a new child instance, we can use bud.make. It is a function that accepts two parameters: a name for the instance (so we can refer to it later), and a callback that is identical to the standard bud.config.js module-level function. In this example we're creating two instances of bud: one for theme code and another for plugin code. JavascriptTypeScript bud.config.ts import type {Framework} from '@roots/bud' import Babel from '@roots/bud-babel' import React from '@roots/bud-react' export default (app: Framework): void =&gt; app .make('theme', (theme: Framework): void =&gt; { theme .use(Babel) .setPath('dist', 'dist/theme') .entry('theme', ['theme.js', 'theme.css']) }) .make('plugin', (plugin: Framework): void =&gt; plugin .use([Babel, React]) .setPath('dist', 'dist/plugin') .entry('plugin', ['plugin.js', 'plugin.css']), ) Copy There is an implicit benefit to structuring our config this way: our plugin compiler uses @roots/bud-react, but our theme compiler does not. Ideally, tree-shaking would make it so that react code didn't make it into our theme but now that we've separated our build into two distinct compilations we've all but guaranteed that it won't. "},{"title":"Using the --target flag​","type":1,"pageTitle":"Running multiple compilers","url":"guides/general-use/multi-compiler#using-the---target-flag","content":"The other benefit is a potentially massive workflow improvement. Let's say that we have to work on the theme more often than the plugin. With the above config we don't have to rebuild the plugin code again just to work on our theme code. We can use the bud cli to only run the compiler we need using the --target flag. $ yarn bud build --target theme Copy If you had more than two instances it might make sense to want to target more than one compiler, and --target supports that: $ yarn bud build --target theme --target plugin Copy "},{"title":"Compilers can only be made from the parent context​","type":1,"pageTitle":"Running multiple compilers","url":"guides/general-use/multi-compiler#compilers-can-only-be-made-from-the-parent-context","content":"You cannot create a child compiler from a child compiler. So, don't do this: bud.config.js module.exports = app =&gt; app.make('theme', theme =&gt; { theme .use([require('@roots/bud-babel')]) .setPath('dist', 'dist/theme') .entry('theme', ['theme.js', 'theme.css']) .make('invalid', grandchild =&gt; { /** * `theme` cannot create a child compiler. only `app` can. */ }) }) Copy If you want to create another child compiler, do so from the parent context: bud.config.js module.exports = app =&gt; app .make('theme', theme =&gt; { theme .use([require('@roots/bud-babel')]) .setPath('dist', 'dist/theme') .entry('theme', ['theme.js', 'theme.css']) }) .make('plugin', plugin =&gt; { plugin .use([require('@roots/bud-babel')]) .setPath('dist', 'dist/plugin') .entry('plugin', ['plugin.js', 'plugin.css']) }) Copy "},{"title":"Installation","type":0,"sectionRef":"#","url":"guides/installation","content":"Installation Add @roots/bud as a development dependency using your choice of pacakge manager. yarnnpm yarn add @roots/bud --dev Copy","keywords":""},{"title":"Optimizing compiled assets","type":0,"sectionRef":"#","url":"guides/getting-started/optimizing","content":"","keywords":""},{"title":"Minimizing filesizes​","type":1,"pageTitle":"Optimizing compiled assets","url":"guides/getting-started/optimizing#minimizing-filesizes","content":"Minify css and js output using bud.minimize bud.config.js module.exports = async bud =&gt; bud .entry({ main: ['index.js', 'index.css'], landing: 'landing.js', }) .assets(['images/**/*.{png,gif,jpg}']) .template() .minimize() Copy "},{"title":"Hashing filenames​","type":1,"pageTitle":"Optimizing compiled assets","url":"guides/getting-started/optimizing#hashing-filenames","content":"Add filename hashing using bud.hash bud.config.js module.exports = async bud =&gt; bud .entry({ main: ['index.js', 'index.css'], landing: 'landing.js', }) .assets(['images/**/*.{png,gif,jpg}']) .template() .minimize() .hash() Copy "},{"title":"Create a runtime​","type":1,"pageTitle":"Optimizing compiled assets","url":"guides/getting-started/optimizing#create-a-runtime","content":"We can leverage code splitting using bud.runtime bud.config.js module.exports = async bud =&gt; bud .entry({ main: ['index.js', 'index.css'], landing: 'landing.js', }) .assets(['images/**/*.{png,gif,jpg}']) .template() .minimize() .hash() .runtime() Copy "},{"title":"Split out vendored code​","type":1,"pageTitle":"Optimizing compiled assets","url":"guides/getting-started/optimizing#split-out-vendored-code","content":"We'll probably end up installing additional packages in our project. We can use bud.splitChunks to ensure they are always packaged separately from our application code bud.config.js module.exports = async bud =&gt; bud .entry({ main: ['index.js', 'index.css'], landing: 'landing.js', }) .assets(['images/**/*.{png,gif,jpg}']) .template() .minimize() .hash() .runtime() .splitChunks() Copy "},{"title":"Optimizing images​","type":1,"pageTitle":"Optimizing compiled assets","url":"guides/getting-started/optimizing#optimizing-images","content":"Image optimization can be added using the @roots/bud-imagemin extension. yarnnpm yarn add @roots/bud-imagemin --dev Copy Remember to run bud install after installing to ensure you have the proper peer dependencies. Then, add the extension to your config. You can provide additional configuration to the @roots/bud-imagemin extension using bud.imagemin. but we won't get into that. "},{"title":"Applying optimizations conditionally​","type":1,"pageTitle":"Optimizing compiled assets","url":"guides/getting-started/optimizing#applying-optimizations-conditionally","content":"All of these optimizations are slowing down our dev builds for no reason. Worse still, the bud.hash function is breaking our hot reloading. Let's use bud.mode to only apply these optimizations for production builds. bud.config.js module.exports = async bud =&gt; { bud .entry({ main: ['index.js', 'index.css'], landing: 'landing.js', }) .assets(['images/**/*.{png,gif,jpg}']) .template() if (bud.mode === 'production') { bud.minimize().hash().runtime().splitChunks() } } Copy That's better. Hot reloading works again and our build has been restored to its former, snappy glory. But, sadly, we broke our impressive looking function chain to get back to this point. We can fix that using another helpful bud property: bud.isProduction. This property is a boolean and is truewhen bud is being run in production mode. This can help us replace that if statement. We'll pair bud.isProduction up with a utility function called bud.when, which allows us to do things only when certain conditions are met. Check the documentation for additional clarity on how they work (and work together!) but this is how we'll use them in our config to get everything cleaned up: bud.config.js module.exports = async bud =&gt; bud .entry({ main: ['index.js', 'index.css'], landing: 'landing.js', }) .assets(['images/**/*.{png,gif,jpg}']) .template() .when(bud.isProduction, bud =&gt; bud .use(require('@roots/bud-imagemin')) .minimize() .hash() .runtime() .splitChunks(), ) Copy "},{"title":"Adding a new entrypoint","type":0,"sectionRef":"#","url":"guides/getting-started/entrypoints","content":"","keywords":""},{"title":"Add a second script​","type":1,"pageTitle":"Adding a new entrypoint","url":"guides/getting-started/entrypoints#add-a-second-script","content":"Add a new script to your project at src/landing.js. src/landing.js console.log('landing page script') Copy To build it, specify the new script in bud.config.js using bud.entry. JavascriptTypeScript bud.config.js module.exports = bud =&gt; bud.entry('landing', 'landing.js').template() Copy "},{"title":"Two steps forward, one step back​","type":1,"pageTitle":"Adding a new entrypoint","url":"guides/getting-started/entrypoints#two-steps-forward-one-step-back","content":"If you run a build now you'll see your new file was compiled, but you might also notice that dist/main.js is missing. Until now, we'd been successfully relying on bud's implicit inclusion of src/index.js, which it will attempt to use if bud.entry is not called. But now that we are specifying an entrypoint in our config, we'll need to explicitly specify src/index.js as well. JavascriptTypeScript bud.config.js module.exports = bud =&gt; bud .entry('main', 'index.js') .entry('landing', 'landing.js') .template() Copy "},{"title":"Adding files to an existing entrypoint​","type":1,"pageTitle":"Adding a new entrypoint","url":"guides/getting-started/entrypoints#adding-files-to-an-existing-entrypoint","content":"Currently, we are importing our application css by importing it into the src/index.js entrypoint. src/index.js import './index.css' console.log('hello, world.') Copy This is a totally valid way to handle css in your build, but let's instead specify the css file in bud.config.js so we can keep learning about how to work with it. Start by removing the css import from src/index.js src/index.js console.log('hello world!') Copy Now, add the css to the main entry. JavascriptTypeScript bud.config.js module.exports = bud =&gt; bud .entry('main', ['index.js', 'index.css']) .entry('landing', 'landing.js') .template() Copy As you can see, bud.entry's second parameter can be either a string or an array, and we're using the array so we can specify multiple files. "},{"title":"Specifying entrypoints as an object​","type":1,"pageTitle":"Adding a new entrypoint","url":"guides/getting-started/entrypoints#specifying-entrypoints-as-an-object","content":"While we can call bud.entry as many times as we need, we can also specify all of our entrypoints in one call using object syntax. bud.config.js module.exports = bud =&gt; bud .entry({ main: ['index.js', 'index.css'], landing: 'landing.js', }) .template() Copy Subsequent calls to bud.entry will merge our existing entrypoints with our new ones, rather than overwriting everything. So this is safe and functionally equivalent: bud.config.js module.exports = bud =&gt; bud .entry({main: ['index.js', 'index.css']}) .entry({landing: 'landing.js'}) .template() Copy "}]