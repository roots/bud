import {path} from '@repo/constants'
import {CommandClass, Option} from 'clipanion'
import * as fs from 'fs-jetpack'

import {Command} from './base.command'

/**
 * TSC Command
 */
export class Tsc extends Command {
  /**
   * Command name
   */
  public static label = `@bud tsc`

  /**
   * Command paths
   */
  public static paths: CommandClass['paths'] = [
    [`@bud`, `tsc`],
    [`@bud`, `build`],
  ]

  /**
   * tsconfig path
   */
  public tsconfig = path(`config/tsconfig.json`)

  /**
   * Passthrough
   */
  public passthrough = Option.Proxy({name: `tsc options`})

  /**
   * Command usage
   */
  public static usage: CommandClass['usage'] = {
    category: `@bud`,
    description: `Run the typescript compiler`,
    examples: [
      [`run the typescript compiler`, `yarn @bud tsc`],
      [
        `run the typescript compiler in watch mode`,
        `yarn @bud tsc --watch`,
      ],
      [
        `run the typescript compiler with forced rebuild (no incremental compilation)`,
        `yarn @bud tsc --force`,
      ],
    ],
  }

  /**
   * Command execute
   */
  public async execute() {
    await this.bundleS3SDK()

    await this.$([
      `yarn`,
      [`tsc`, `-b`, this.tsconfig, ...this.passthrough],
    ])
  }

  public async bundleS3SDK() {
    await this.$([
      `yarn`,
      [
        `esbuild`,
        `--bundle`,
        `./node_modules/@aws-sdk/client-s3/dist-es/index.js`,
        `--outdir=sources/@roots/filesystem/vendor/sdk`,
        `--external:crypto`,
        `--external:module`,
        `--platform=node`,
      ],
    ])

    let code = await fs.readAsync(
      path(`sources/@roots/filesystem/vendor/sdk/index.js`),
      `utf8`,
    )
    await fs.writeAsync(
      path(`sources/@roots/filesystem/vendor/sdk/index.cjs`),
      `/**\n * This file is generated by @roots/bud\n * Do not edit\n */\n// @ts-nocheck\n\n${code}`,
    )
    await fs.removeAsync(
      path(`sources/@roots/filesystem/vendor/sdk/index.js`),
    )
  }
}
