/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-repo",
factory: function (require) {
var plugin=(()=>{var B=Object.create,y=Object.defineProperty;var O=Object.getOwnPropertyDescriptor;var P=Object.getOwnPropertyNames;var R=Object.getPrototypeOf,S=Object.prototype.hasOwnProperty;var A=e=>y(e,"__esModule",{value:!0});var r=e=>{if(typeof require!="undefined")return require(e);throw new Error('Dynamic require of "'+e+'" is not supported')};var C=(e,a)=>{for(var t in a)y(e,t,{get:a[t],enumerable:!0})},I=(e,a,t)=>{if(a&&typeof a=="object"||typeof a=="function")for(let i of P(a))!S.call(e,i)&&i!=="default"&&y(e,i,{get:()=>a[i],enumerable:!(t=O(a,i))||t.enumerable});return e},o=e=>I(A(y(e!=null?B(R(e)):{},"default",e&&e.__esModule&&"default"in e?{get:()=>e.default,enumerable:!0}:{value:e,enumerable:!0})),e);var K={};C(K,{default:()=>F});var w=o(r("@yarnpkg/cli")),k=o(r("@yarnpkg/core")),x=o(r("@yarnpkg/shell")),$;(function(t){t[t.ERROR=1]="ERROR",t[t.OK=0]="OK"})($||($={}));var s=class extends w.BaseCommand{async getManifest(){return await k.Manifest.tryFind(this.context.cwd)}async $(...a){await Promise.all(a.map(async t=>{if(!!t){process.stdout.write(`[repo] ${t}
`);try{let i=await(0,x.execute)(t);if(i!==0)throw new Error(`[repo] ${t} failed with code ${i}
`);process.stdout.write(`[repo] ${t} completed with code ${i}
`)}catch(i){throw new Error(i)}}}))}};var n=o(r("clipanion")),c=class extends s{constructor(){super(...arguments);this.cjs=n.Option.Boolean("-c,--cjs",!1,{description:"build commonjs. default true."});this.esm=n.Option.Boolean("-e,--esm",!1,{description:"build esmodules. default true."});this.clean=n.Option.Boolean("--clean",!1,{description:"build with tsc --clean flag. default false"});this.force=n.Option.Boolean("--force",!1,{description:"build with tsc --force flag. default false."});this.verbose=n.Option.Boolean("--verbose",!0,{description:"build with tsc --verbose flag. default true."});this.watch=n.Option.Boolean("--watch",!1,{description:"build with tsc --watch flag. default false."})}async execute(){this.clean&&(this.verbose=!1),this.clean&&this.force&&console.error("--clean and --force are mutually exclusive");let a=!this.cjs&&!this.esm,t={cjs:`yarn tsc -b tsconfig.json${this.verbose?" --verbose":""}${this.clean?" --clean":""}${this.force?" --force":""}${this.watch?" --watch":""}`,esm:`yarn tsc -b tsconfig.esm.json${this.verbose?" --verbose":""}${this.clean?" --clean":""}${this.force?" --force":""}${this.watch?" --watch":""}`};this.all?await this.$(t.cjs,t.esm):this.cjs?await this.$(t.cjs):this.esm&&await this.$(t.esm),await this.$("yarn repo compile @roots/container","yarn repo compile @roots/bud-dashboard","yarn repo compile @roots/bud-support")}};c.paths=[["repo","build"]],c.usage={category:"repo",details:"build project packages.",examples:[["build packages as commonjs","yarn repo build --cjs"],["build packages as esm","yarn repo build --esm"],["build packages with tsc --clean flag","yarn repo build --clean"],["build packages with tsc --force flag","yarn repo build --force"],["build packages with tsc --verbose flag","yarn repo build --verbose"],["build packages with tsc --watch flag","yarn repo build --watch"],["force build commonjs verbosely","yarn repo build --cjs --verbose --force"]]};var j=o(r("clipanion")),p=class extends s{constructor(){super(...arguments);this.options={dfx:j.Option.Boolean("-d,--dfx",!1,{description:"use with caution. alias for git clean -dfx. removes all files not tracked in repo. default false."})}}async execute(){if(await this.$("yarn cache clean"),this.options.dfx){await this.$("git clean -dfx");return}this.options.dfx||(await this.$("yarn rimraf **/.budfiles"),await this.$("yarn rimraf **/node_modules"),await this.$("yarn rimraf packages/@roots/*/lib"),await this.$("yarn rimraf packages/@roots/*/types"))}};p.paths=[["repo","clean"]],p.usage={category:"repo",details:"clean project artifacts files",examples:[["delete all project artifacts","yarn repo clean"],["delete all untracked files","yarn repo clean --dfx"]]};var v=o(r("clipanion")),d=class extends s{constructor(){super(...arguments);this.package=v.Option.String()}async execute(){await this.$(`yarn ts-node ./dev/tasks/compile/cjs ${this.package}`),await this.$(`yarn ts-node ./dev/tasks/compile/esm ${this.package}`)}};d.paths=[["repo","compile"]],d.usage={category:"repo",description:"compile a package",details:"compiles as both cjs and esm with ncc",examples:[["compile {package name}","yarn repo compile @roots/bud-support"]]};var l=o(r("clipanion")),u=class extends s{constructor(){super(...arguments);this.prettier=l.Option.Boolean("-p,--prettier",!1,{description:"run prettier"});this.eslint=l.Option.Boolean("-e,--eslint",!1,{description:"run eslint"});this.skypack=l.Option.Boolean("-s,--skypack",!1,{description:"run skypack"});this.types=l.Option.Boolean("-t,--types",!1,{description:"includes types (prettier)"});this.lib=l.Option.Boolean("-l,--lib",!1,{description:"includes lib (prettier)"})}async execute(){!this.prettier&&!this.skypack&&!this.eslint&&(this.prettier=!0,this.skypack=!0,this.eslint=!0),await this.$(...[...this.eslint?["yarn eslint packages/@roots/*/src/**/*.{js,jsx,ts,tsx} --fix","yarn eslint dev/**/*.{js,jsx,ts,tsx} --fix","yarn eslint site/src/**/*.{js,jsx,ts,tsx} --fix"]:[],...this.prettier?["yarn prettier packages/@roots/*/src/**/* --write --ignore-unknown --loglevel silent --no-error-on-unmatched-pattern",this.lib?"yarn prettier packages/@roots/*/lib/**/* --write --ignore-unknown --loglevel silent --no-error-on-unmatched-pattern":"",this.types?"yarn prettier packages/@roots/*/types/**/*.d.ts --write --ignore-unknown --loglevel silent --no-error-on-unmatched-pattern":null,"yarn prettier site/src/**/*.{js,ts} --write --ignore-unknown --loglevel silent --no-error-on-unmatched-pattern","yarn prettier site/{blog,docs,extensions,guides,i18n,pages,recipes,releases,sidebars}/*.mdx --write --ignore-unknown --loglevel silent --no-error-on-unmatched-pattern"].filter(Boolean):[],this.skypack?"yarn workspaces foreach --no-private --exclude @roots/bud-typings -p -v run pkg":null].filter(Boolean))}};u.paths=[["repo","lint"]],u.usage={category:"repo",description:"lint repo files. run all linters by passing no flags.",examples:[["run all linters","yarn repo lint"],["run prettier","yarn repo lint --prettier"],["run eslint","yarn repo lint --eslint"],["run skypack","yarn repo lint --skypack"],["lint on type definitions as well","yarn repo lint --types"]]};var g=o(r("clipanion")),m=class extends s{constructor(){super(...arguments);this.workers=g.Option.String("-w,--workers","50%",{description:"number of workers. default 50%."});this.update=g.Option.Boolean("--update",!1,{description:"update snapshots. default false."})}async execute(){await this.$(`yarn jest --verbose --maxWorkers=${this.workers} ${this.update?"--updateSnapshot":"--coverage"}`)}};m.paths=[["repo","test"]],m.usage={category:"repo",details:"test files with jest",examples:[["test","yarn repo test"],["update snapshots","yarn repo test --update"]]};var f=class extends s{async execute(){await this.$("yarn install --immutable"),await this.$("yarn repo build"),await this.$("yarn repo lint"),await this.$("yarn repo test")}};f.paths=[["repo","make"]],f.usage={category:"repo",description:"make project files same as ci",examples:[["yarn repo make"]]};var b=o(r("clipanion")),h=class extends s{constructor(){super(...arguments);this.api=b.Option.Boolean("-a,--api",!1,"build api docs");this.site=b.Option.Boolean("-s,--site",!1,"build site files");this.readme=b.Option.Boolean("-r,--readme",!1,"build readme files")}async execute(){!this.site&&!this.readme&&!this.docs&&(await this.$("yarn node ./site/api-documenter.build.js"),await this.$("yarn workspace @roots/bud-docs run docusaurus build","yarn ts-node-transpile-only ./dev/readme")),(this.docs||this.site)&&await this.$("yarn node ./site/api-documenter.build.js"),await this.$(...[this.site?"yarn workspace @roots/bud-docs run docusaurus build":null,this.readme?"yarn ts-node-transpile-only ./dev/readme":null].filter(Boolean))}};h.paths=[["repo","docs"]],h.usage={category:"repo",description:"build docs and readme files. no flags builds everything. running with the --site flag will also build api docs.",examples:[["build all","yarn repo docs"],["build api documentation","yarn repo docs --api"],["build api documentation and site files","yarn repo docs --site"],["build readme files","yarn docs --readme"]]};var W={hooks:{afterAllInstalled:()=>{console.log("What a great install, am I right?")}},commands:[c,p,d,u,f,h,m]},F=W;return K;})();
return plugin;
}
};
